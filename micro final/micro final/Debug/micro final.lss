
micro final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000350  00800100  0000147a  0000150e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000147a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800450  00800450  0000185e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000185e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e74  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b55  00000000  00000000  00003878  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f8f  00000000  00000000  000043cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  0000535c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f0  00000000  00000000  0000561c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001409  00000000  00000000  00005c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00007015  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_1>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	1f 1c       	adc	r1, r15
      6a:	1f 1e       	adc	r1, r31
      6c:	1f 1e       	adc	r1, r31
      6e:	1f 1f       	adc	r17, r31
      70:	1e 1f       	adc	r17, r30
      72:	1e 1f       	adc	r17, r30

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	14 e0       	ldi	r17, 0x04	; 4
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	ea e7       	ldi	r30, 0x7A	; 122
      88:	f4 e1       	ldi	r31, 0x14	; 20
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a0 35       	cpi	r26, 0x50	; 80
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	24 e0       	ldi	r18, 0x04	; 4
      98:	a0 e5       	ldi	r26, 0x50	; 80
      9a:	b4 e0       	ldi	r27, 0x04	; 4
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a6 35       	cpi	r26, 0x56	; 86
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 de 03 	call	0x7bc	; 0x7bc <main>
      aa:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <i2c_init>:
#endif
#define SCL_CLOCK  10000L

void i2c_init(void)
{	
	TWSR = 0;                         
      b2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  
      b6:	80 ec       	ldi	r24, 0xC0	; 192
      b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
      bc:	08 95       	ret

000000be <i2c_start>:

}
unsigned char i2c_start(unsigned char address)
{
	uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
      be:	94 ea       	ldi	r25, 0xA4	; 164
      c0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
      c4:	ec eb       	ldi	r30, 0xBC	; 188
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	90 81       	ld	r25, Z
      ca:	99 23       	and	r25, r25
      cc:	ec f7       	brge	.-6      	; 0xc8 <i2c_start+0xa>
	twst = TW_STATUS & 0xF8;
      ce:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
      d2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
      d4:	98 30       	cpi	r25, 0x08	; 8
      d6:	11 f0       	breq	.+4      	; 0xdc <i2c_start+0x1e>
      d8:	90 31       	cpi	r25, 0x10	; 16
      da:	a1 f4       	brne	.+40     	; 0x104 <i2c_start+0x46>

	// enviando direccion 
	TWDR = address;
      dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
      e0:	84 e8       	ldi	r24, 0x84	; 132
      e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// esperar a que se complete a transmicion y devolver un nack o un ack
	while(!(TWCR & (1<<TWINT)));
      e6:	ec eb       	ldi	r30, 0xBC	; 188
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 81       	ld	r24, Z
      ec:	88 23       	and	r24, r24
      ee:	ec f7       	brge	.-6      	; 0xea <i2c_start+0x2c>

	//chequea valor del estatos de twi
	twst = TW_STATUS & 0xF8;
      f0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
      f4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
      f6:	98 31       	cpi	r25, 0x18	; 24
      f8:	39 f0       	breq	.+14     	; 0x108 <i2c_start+0x4a>
{
	uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	90 34       	cpi	r25, 0x40	; 64
      fe:	29 f4       	brne	.+10     	; 0x10a <i2c_start+0x4c>
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	08 95       	ret
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	08 95       	ret

	//chequea valor del estatos de twi
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     108:	80 e0       	ldi	r24, 0x00	; 0

}
     10a:	08 95       	ret

0000010c <i2c_start_wait>:
void i2c_start_wait(unsigned char address)
{
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
	uint8_t   twst;


	while ( 1 )
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     110:	ec eb       	ldi	r30, 0xBC	; 188
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	24 ea       	ldi	r18, 0xA4	; 164

		while(!(TWCR & (1<<TWINT)));
		twst = TW_STATUS & 0xF8;
     116:	a9 eb       	ldi	r26, 0xB9	; 185
     118:	b0 e0       	ldi	r27, 0x00	; 0
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
		
		TWDR = address;
     11a:	cb eb       	ldi	r28, 0xBB	; 187
     11c:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
     11e:	34 e8       	ldi	r19, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));
		
		twst = TW_STATUS & 0xF8;
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     120:	44 e9       	ldi	r20, 0x94	; 148
	uint8_t   twst;


	while ( 1 )
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     122:	20 83       	st	Z, r18

		while(!(TWCR & (1<<TWINT)));
     124:	90 81       	ld	r25, Z
     126:	99 23       	and	r25, r25
     128:	ec f7       	brge	.-6      	; 0x124 <i2c_start_wait+0x18>
		twst = TW_STATUS & 0xF8;
     12a:	9c 91       	ld	r25, X
     12c:	98 7f       	andi	r25, 0xF8	; 248
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     12e:	98 30       	cpi	r25, 0x08	; 8
     130:	11 f0       	breq	.+4      	; 0x136 <i2c_start_wait+0x2a>
     132:	90 31       	cpi	r25, 0x10	; 16
     134:	b1 f7       	brne	.-20     	; 0x122 <i2c_start_wait+0x16>
		
		TWDR = address;
     136:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
     138:	30 83       	st	Z, r19
		
		while(!(TWCR & (1<<TWINT)));
     13a:	90 81       	ld	r25, Z
     13c:	99 23       	and	r25, r25
     13e:	ec f7       	brge	.-6      	; 0x13a <i2c_start_wait+0x2e>
		
		twst = TW_STATUS & 0xF8;
     140:	9c 91       	ld	r25, X
     142:	98 7f       	andi	r25, 0xF8	; 248
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
     144:	90 32       	cpi	r25, 0x20	; 32
     146:	11 f0       	breq	.+4      	; 0x14c <i2c_start_wait+0x40>
     148:	98 35       	cpi	r25, 0x58	; 88
     14a:	29 f4       	brne	.+10     	; 0x156 <i2c_start_wait+0x4a>
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     14c:	40 83       	st	Z, r20
			
			while(TWCR & (1<<TWSTO));
     14e:	90 81       	ld	r25, Z
     150:	94 fd       	sbrc	r25, 4
     152:	fd cf       	rjmp	.-6      	; 0x14e <i2c_start_wait+0x42>
     154:	e6 cf       	rjmp	.-52     	; 0x122 <i2c_start_wait+0x16>
			continue;
		}
		break;
	}

}
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <i2c_rep_start>:
unsigned char i2c_rep_start(unsigned char address)
{
	return i2c_start( address );
     15c:	0e 94 5f 00 	call	0xbe	; 0xbe <i2c_start>
}
     160:	08 95       	ret

00000162 <i2c_stop>:
void i2c_stop(void)
{
	/* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     162:	84 e9       	ldi	r24, 0x94	; 148
     164:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     168:	ec eb       	ldi	r30, 0xBC	; 188
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	84 fd       	sbrc	r24, 4
     170:	fd cf       	rjmp	.-6      	; 0x16c <i2c_stop+0xa>

}
     172:	08 95       	ret

00000174 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{
	uint8_t   twst;
	
	// envia datos al sensor
	TWDR = data;
     174:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     178:	84 e8       	ldi	r24, 0x84	; 132
     17a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// espera
	while(!(TWCR & (1<<TWINT)));
     17e:	ec eb       	ldi	r30, 0xBC	; 188
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	88 23       	and	r24, r24
     186:	ec f7       	brge	.-6      	; 0x182 <i2c_write+0xe>

	twst = TW_STATUS & 0xF8;
     188:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     18c:	98 7f       	andi	r25, 0xF8	; 248
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	98 32       	cpi	r25, 0x28	; 40
     192:	09 f4       	brne	.+2      	; 0x196 <i2c_write+0x22>
     194:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

	}
     196:	08 95       	ret

00000198 <i2c_readAck>:
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     198:	84 ec       	ldi	r24, 0xC4	; 196
     19a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     19e:	ec eb       	ldi	r30, 0xBC	; 188
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	88 23       	and	r24, r24
     1a6:	ec f7       	brge	.-6      	; 0x1a2 <i2c_readAck+0xa>

	return TWDR;
     1a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	}
     1ac:	08 95       	ret

000001ae <i2c_readNak>:
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1ae:	84 e8       	ldi	r24, 0x84	; 132
     1b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     1b4:	ec eb       	ldi	r30, 0xBC	; 188
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	88 23       	and	r24, r24
     1bc:	ec f7       	brge	.-6      	; 0x1b8 <i2c_readNak+0xa>
	
    return TWDR;
     1be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     1c2:	08 95       	ret

000001c4 <ds1307_init>:

//cambiar valores

uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}
     1c4:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_init>
     1c8:	85 e3       	ldi	r24, 0x35	; 53
     1ca:	8a 95       	dec	r24
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <ds1307_init+0x6>
     1ce:	00 00       	nop
     1d0:	08 95       	ret

000001d2 <ds1307_getdayofweek>:
	return val - 6 * (val >> 4);
}

//numero de dias del anio
static uint16_t ds1307_date2days(uint8_t y, uint8_t m, uint8_t d) {
	uint16_t days = d;
     1d2:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 1; i < m; ++i)
     1d4:	62 30       	cpi	r22, 0x02	; 2
     1d6:	70 f0       	brcs	.+28     	; 0x1f4 <ds1307_getdayofweek+0x22>
     1d8:	e8 e6       	ldi	r30, 0x68	; 104
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	2e ef       	ldi	r18, 0xFE	; 254
     1de:	26 0f       	add	r18, r22
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	27 59       	subi	r18, 0x97	; 151
     1e4:	3f 4f       	sbci	r19, 0xFF	; 255
	//lee un byte de la memoria flash
	//entre parentesis es la direccion donde indice donde reside la variable
	days += pgm_read_byte(ds1307_daysinmonth + i - 1);
     1e6:	94 91       	lpm	r25, Z
     1e8:	49 0f       	add	r20, r25
     1ea:	51 1d       	adc	r21, r1
     1ec:	31 96       	adiw	r30, 0x01	; 1
}

//numero de dias del anio
static uint16_t ds1307_date2days(uint8_t y, uint8_t m, uint8_t d) {
	uint16_t days = d;
	for (uint8_t i = 1; i < m; ++i)
     1ee:	e2 17       	cp	r30, r18
     1f0:	f3 07       	cpc	r31, r19
     1f2:	c9 f7       	brne	.-14     	; 0x1e6 <ds1307_getdayofweek+0x14>
	//lee un byte de la memoria flash
	//entre parentesis es la direccion donde indice donde reside la variable
	days += pgm_read_byte(ds1307_daysinmonth + i - 1);
	if (m > 2 && y % 4 == 0)
     1f4:	63 30       	cpi	r22, 0x03	; 3
     1f6:	28 f0       	brcs	.+10     	; 0x202 <ds1307_getdayofweek+0x30>
     1f8:	98 2f       	mov	r25, r24
     1fa:	93 70       	andi	r25, 0x03	; 3
     1fc:	11 f4       	brne	.+4      	; 0x202 <ds1307_getdayofweek+0x30>
	++days;
     1fe:	4f 5f       	subi	r20, 0xFF	; 255
     200:	5f 4f       	sbci	r21, 0xFF	; 255
	
	return days + 365 * y + (y + 3) / 4 - 1;
     202:	90 e0       	ldi	r25, 0x00	; 0
}
// dia de la semana

uint8_t ds1307_getdayofweek(uint8_t y, uint8_t m, uint8_t d) {
	uint16_t day = ds1307_date2days(y, m, d);
	return (day + 6) % 7;
     204:	6d e6       	ldi	r22, 0x6D	; 109
     206:	71 e0       	ldi	r23, 0x01	; 1
     208:	86 9f       	mul	r24, r22
     20a:	90 01       	movw	r18, r0
     20c:	87 9f       	mul	r24, r23
     20e:	30 0d       	add	r19, r0
     210:	96 9f       	mul	r25, r22
     212:	30 0d       	add	r19, r0
     214:	11 24       	eor	r1, r1
     216:	b9 01       	movw	r22, r18
     218:	6b 5f       	subi	r22, 0xFB	; 251
     21a:	7f 4f       	sbci	r23, 0xFF	; 255
     21c:	03 96       	adiw	r24, 0x03	; 3
     21e:	9c 01       	movw	r18, r24
     220:	12 f4       	brpl	.+4      	; 0x226 <ds1307_getdayofweek+0x54>
     222:	2d 5f       	subi	r18, 0xFD	; 253
     224:	3f 4f       	sbci	r19, 0xFF	; 255
     226:	35 95       	asr	r19
     228:	27 95       	ror	r18
     22a:	35 95       	asr	r19
     22c:	27 95       	ror	r18
     22e:	26 0f       	add	r18, r22
     230:	37 1f       	adc	r19, r23
     232:	42 0f       	add	r20, r18
     234:	53 1f       	adc	r21, r19
     236:	9a 01       	movw	r18, r20
     238:	a3 e9       	ldi	r26, 0x93	; 147
     23a:	b4 e2       	ldi	r27, 0x24	; 36
     23c:	0e 94 20 07 	call	0xe40	; 0xe40 <__umulhisi3>
     240:	28 1b       	sub	r18, r24
     242:	39 0b       	sbc	r19, r25
     244:	36 95       	lsr	r19
     246:	27 95       	ror	r18
     248:	82 0f       	add	r24, r18
     24a:	93 1f       	adc	r25, r19
     24c:	96 95       	lsr	r25
     24e:	87 95       	ror	r24
     250:	96 95       	lsr	r25
     252:	87 95       	ror	r24
     254:	9c 01       	movw	r18, r24
     256:	22 0f       	add	r18, r18
     258:	33 1f       	adc	r19, r19
     25a:	22 0f       	add	r18, r18
     25c:	33 1f       	adc	r19, r19
     25e:	22 0f       	add	r18, r18
     260:	33 1f       	adc	r19, r19
     262:	b9 01       	movw	r22, r18
     264:	68 1b       	sub	r22, r24
     266:	79 0b       	sbc	r23, r25
     268:	cb 01       	movw	r24, r22
}
     26a:	74 2f       	mov	r23, r20
     26c:	78 1b       	sub	r23, r24
     26e:	87 2f       	mov	r24, r23
     270:	08 95       	ret

00000272 <ds1307_setdate>:
// configurar fecha 
uint8_t ds1307_setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
     272:	cf 92       	push	r12
     274:	df 92       	push	r13
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29

	if (second < 0 || second > 59 ||
     282:	9b e3       	ldi	r25, 0x3B	; 59
     284:	9e 15       	cp	r25, r14
     286:	08 f4       	brcc	.+2      	; 0x28a <ds1307_setdate+0x18>
     288:	dd c0       	rjmp	.+442    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	minute < 0 || minute > 59 ||
     28a:	0c 33       	cpi	r16, 0x3C	; 60
     28c:	08 f0       	brcs	.+2      	; 0x290 <ds1307_setdate+0x1e>
     28e:	dc c0       	rjmp	.+440    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	hour < 0 || hour > 23 ||
     290:	28 31       	cpi	r18, 0x18	; 24
     292:	08 f0       	brcs	.+2      	; 0x296 <ds1307_setdate+0x24>
     294:	db c0       	rjmp	.+438    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     296:	9f ef       	ldi	r25, 0xFF	; 255
     298:	94 0f       	add	r25, r20
     29a:	9f 31       	cpi	r25, 0x1F	; 31
     29c:	08 f0       	brcs	.+2      	; 0x2a0 <ds1307_setdate+0x2e>
     29e:	d8 c0       	rjmp	.+432    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	day < 1 || day > 31 ||
     2a0:	9f ef       	ldi	r25, 0xFF	; 255
     2a2:	96 0f       	add	r25, r22
     2a4:	9c 30       	cpi	r25, 0x0C	; 12
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <ds1307_setdate+0x38>
     2a8:	d5 c0       	rjmp	.+426    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	month < 1 || month > 12 ||
	year < 0 || year > 99)
     2aa:	84 36       	cpi	r24, 0x64	; 100
     2ac:	08 f0       	brcs	.+2      	; 0x2b0 <ds1307_setdate+0x3e>
     2ae:	d4 c0       	rjmp	.+424    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     2b0:	c2 2f       	mov	r28, r18
     2b2:	d4 2f       	mov	r29, r20
     2b4:	16 2f       	mov	r17, r22
     2b6:	f8 2e       	mov	r15, r24
	return 8;

	if (month== 2 && year % 4 == 0 && day==29 )
     2b8:	62 30       	cpi	r22, 0x02	; 2
     2ba:	09 f0       	breq	.+2      	; 0x2be <ds1307_setdate+0x4c>
     2bc:	57 c0       	rjmp	.+174    	; 0x36c <ds1307_setdate+0xfa>
     2be:	83 70       	andi	r24, 0x03	; 3
     2c0:	09 f0       	breq	.+2      	; 0x2c4 <ds1307_setdate+0x52>
     2c2:	54 c0       	rjmp	.+168    	; 0x36c <ds1307_setdate+0xfa>
     2c4:	4d 31       	cpi	r20, 0x1D	; 29
     2c6:	09 f0       	breq	.+2      	; 0x2ca <ds1307_setdate+0x58>
     2c8:	51 c0       	rjmp	.+162    	; 0x36c <ds1307_setdate+0xfa>
	{
		//dia de la semana
		uint8_t dayofweek = ds1307_getdayofweek(year, month, day);
     2ca:	4d e1       	ldi	r20, 0x1D	; 29
     2cc:	62 e0       	ldi	r22, 0x02	; 2
     2ce:	8f 2d       	mov	r24, r15
     2d0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <ds1307_getdayofweek>
     2d4:	18 2f       	mov	r17, r24

		//escribir fecha
		i2c_start_wait(DS1307_ADDR | I2C_WRITE);
     2d6:	80 ed       	ldi	r24, 0xD0	; 208
     2d8:	0e 94 86 00 	call	0x10c	; 0x10c <i2c_start_wait>
		i2c_write(0x00);
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(second));
     2e2:	da e0       	ldi	r29, 0x0A	; 10
     2e4:	8e 2d       	mov	r24, r14
     2e6:	6d 2f       	mov	r22, r29
     2e8:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodqi4>
     2ec:	98 2f       	mov	r25, r24
     2ee:	99 0f       	add	r25, r25
     2f0:	89 0f       	add	r24, r25
     2f2:	88 0f       	add	r24, r24
     2f4:	8e 0d       	add	r24, r14
     2f6:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(minute));
     2fa:	80 2f       	mov	r24, r16
     2fc:	6d 2f       	mov	r22, r29
     2fe:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodqi4>
     302:	98 2f       	mov	r25, r24
     304:	99 0f       	add	r25, r25
     306:	89 0f       	add	r24, r25
     308:	88 0f       	add	r24, r24
     30a:	80 0f       	add	r24, r16
     30c:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(hour));
     310:	8c 2f       	mov	r24, r28
     312:	6d 2f       	mov	r22, r29
     314:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodqi4>
     318:	98 2f       	mov	r25, r24
     31a:	99 0f       	add	r25, r25
     31c:	89 0f       	add	r24, r25
     31e:	88 0f       	add	r24, r24
     320:	8c 0f       	add	r24, r28
     322:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(dayofweek));
     326:	81 2f       	mov	r24, r17
     328:	6d 2f       	mov	r22, r29
     32a:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodqi4>
     32e:	98 2f       	mov	r25, r24
     330:	99 0f       	add	r25, r25
     332:	89 0f       	add	r24, r25
     334:	88 0f       	add	r24, r24
     336:	81 0f       	add	r24, r17
     338:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(29));
     33c:	89 e2       	ldi	r24, 0x29	; 41
     33e:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(month));
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(year));
     348:	8f 2d       	mov	r24, r15
     34a:	6d 2f       	mov	r22, r29
     34c:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodqi4>
     350:	98 2f       	mov	r25, r24
     352:	99 0f       	add	r25, r25
     354:	89 0f       	add	r24, r25
     356:	88 0f       	add	r24, r24
     358:	8f 0d       	add	r24, r15
     35a:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(0x00); 
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_stop();
     364:	0e 94 b1 00 	call	0x162	; 0x162 <i2c_stop>
		i2c_write(ds1307_dec2bcd(month));
		i2c_write(ds1307_dec2bcd(year));
		i2c_write(0x00); 
		i2c_stop();
	}
	return 1;
     368:	81 e0       	ldi	r24, 0x01	; 1
	month < 1 || month > 12 ||
	year < 0 || year > 99)
	return 8;

	if (month== 2 && year % 4 == 0 && day==29 )
	{
     36a:	79 c0       	rjmp	.+242    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		i2c_stop();
	} 
	else
	{
		//dia basado en el mes
		if(day > pgm_read_byte(ds1307_daysinmonth + month - 1))
     36c:	e1 2f       	mov	r30, r17
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	e9 59       	subi	r30, 0x99	; 153
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	e4 91       	lpm	r30, Z
     376:	ed 17       	cp	r30, r29
     378:	08 f4       	brcc	.+2      	; 0x37c <ds1307_setdate+0x10a>
     37a:	70 c0       	rjmp	.+224    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		return 0;

		//obtener dia de la semana
		uint8_t dayofweek = ds1307_getdayofweek(year, month, day);
     37c:	4d 2f       	mov	r20, r29
     37e:	61 2f       	mov	r22, r17
     380:	8f 2d       	mov	r24, r15
     382:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <ds1307_getdayofweek>
     386:	c8 2e       	mov	r12, r24

		//escribir fecha
		i2c_start_wait(DS1307_ADDR | I2C_WRITE);
     388:	80 ed       	ldi	r24, 0xD0	; 208
     38a:	0e 94 86 00 	call	0x10c	; 0x10c <i2c_start_wait>
		i2c_write(0x00);
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(second));
     394:	0f 2e       	mov	r0, r31
     396:	fa e0       	ldi	r31, 0x0A	; 10
     398:	df 2e       	mov	r13, r31
     39a:	f0 2d       	mov	r31, r0
     39c:	8e 2d       	mov	r24, r14
     39e:	6d 2d       	mov	r22, r13
     3a0:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodqi4>
     3a4:	98 2f       	mov	r25, r24
     3a6:	99 0f       	add	r25, r25
     3a8:	89 0f       	add	r24, r25
     3aa:	88 0f       	add	r24, r24
     3ac:	8e 0d       	add	r24, r14
     3ae:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(minute));
     3b2:	80 2f       	mov	r24, r16
     3b4:	6d 2d       	mov	r22, r13
     3b6:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodqi4>
     3ba:	98 2f       	mov	r25, r24
     3bc:	99 0f       	add	r25, r25
     3be:	89 0f       	add	r24, r25
     3c0:	88 0f       	add	r24, r24
     3c2:	80 0f       	add	r24, r16
     3c4:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(hour));
     3c8:	8c 2f       	mov	r24, r28
     3ca:	6d 2d       	mov	r22, r13
     3cc:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodqi4>
     3d0:	98 2f       	mov	r25, r24
     3d2:	99 0f       	add	r25, r25
     3d4:	89 0f       	add	r24, r25
     3d6:	88 0f       	add	r24, r24
     3d8:	8c 0f       	add	r24, r28
     3da:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(dayofweek));
     3de:	8c 2d       	mov	r24, r12
     3e0:	6d 2d       	mov	r22, r13
     3e2:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodqi4>
     3e6:	98 2f       	mov	r25, r24
     3e8:	99 0f       	add	r25, r25
     3ea:	89 0f       	add	r24, r25
     3ec:	88 0f       	add	r24, r24
     3ee:	8c 0d       	add	r24, r12
     3f0:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(day));
     3f4:	8d 2f       	mov	r24, r29
     3f6:	6d 2d       	mov	r22, r13
     3f8:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodqi4>
     3fc:	98 2f       	mov	r25, r24
     3fe:	99 0f       	add	r25, r25
     400:	89 0f       	add	r24, r25
     402:	88 0f       	add	r24, r24
     404:	8d 0f       	add	r24, r29
     406:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(month));
     40a:	81 2f       	mov	r24, r17
     40c:	6d 2d       	mov	r22, r13
     40e:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodqi4>
     412:	98 2f       	mov	r25, r24
     414:	99 0f       	add	r25, r25
     416:	89 0f       	add	r24, r25
     418:	88 0f       	add	r24, r24
     41a:	81 0f       	add	r24, r17
     41c:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(ds1307_dec2bcd(year));
     420:	8f 2d       	mov	r24, r15
     422:	6d 2d       	mov	r22, r13
     424:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodqi4>
     428:	98 2f       	mov	r25, r24
     42a:	99 0f       	add	r25, r25
     42c:	89 0f       	add	r24, r25
     42e:	88 0f       	add	r24, r24
     430:	8f 0d       	add	r24, r15
     432:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_write(0x00); 
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
		i2c_stop();
     43c:	0e 94 b1 00 	call	0x162	; 0x162 <i2c_stop>
	}
	return 1;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0d c0       	rjmp	.+26     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	minute < 0 || minute > 59 ||
	hour < 0 || hour > 23 ||
	day < 1 || day > 31 ||
	month < 1 || month > 12 ||
	year < 0 || year > 99)
	return 8;
     444:	88 e0       	ldi	r24, 0x08	; 8
     446:	0b c0       	rjmp	.+22     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     448:	88 e0       	ldi	r24, 0x08	; 8
     44a:	09 c0       	rjmp	.+18     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     44c:	88 e0       	ldi	r24, 0x08	; 8
     44e:	07 c0       	rjmp	.+14     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     450:	88 e0       	ldi	r24, 0x08	; 8
     452:	05 c0       	rjmp	.+10     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     454:	88 e0       	ldi	r24, 0x08	; 8
     456:	03 c0       	rjmp	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     458:	88 e0       	ldi	r24, 0x08	; 8
     45a:	01 c0       	rjmp	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	} 
	else
	{
		//dia basado en el mes
		if(day > pgm_read_byte(ds1307_daysinmonth + month - 1))
		return 0;
     45c:	80 e0       	ldi	r24, 0x00	; 0
		i2c_write(ds1307_dec2bcd(year));
		i2c_write(0x00); 
		i2c_stop();
	}
	return 1;
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	cf 90       	pop	r12
     46e:	08 95       	ret

00000470 <ds1307_getdate>:
//obtener fecha
void ds1307_getdate(uint8_t *dsem,uint8_t *year, uint8_t *month, uint8_t *day, uint8_t *hour, uint8_t *minute, uint8_t *second) {
     470:	6f 92       	push	r6
     472:	7f 92       	push	r7
     474:	8f 92       	push	r8
     476:	9f 92       	push	r9
     478:	af 92       	push	r10
     47a:	bf 92       	push	r11
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	4c 01       	movw	r8, r24
     48e:	3b 01       	movw	r6, r22
     490:	ea 01       	movw	r28, r20
     492:	59 01       	movw	r10, r18
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
     494:	80 ed       	ldi	r24, 0xD0	; 208
     496:	0e 94 86 00 	call	0x10c	; 0x10c <i2c_start_wait>
	i2c_write(0x00);//stop oscillator
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
	i2c_stop();
     4a0:	0e 94 b1 00 	call	0x162	; 0x162 <i2c_stop>

	i2c_rep_start(DS1307_ADDR | I2C_READ);
     4a4:	81 ed       	ldi	r24, 0xD1	; 209
     4a6:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_rep_start>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
     4aa:	0e 94 cc 00 	call	0x198	; 0x198 <i2c_readAck>
     4ae:	8f 77       	andi	r24, 0x7F	; 127
     4b0:	98 2f       	mov	r25, r24
     4b2:	92 95       	swap	r25
     4b4:	9f 70       	andi	r25, 0x0F	; 15
     4b6:	29 2f       	mov	r18, r25
     4b8:	22 0f       	add	r18, r18
     4ba:	92 0f       	add	r25, r18
     4bc:	99 0f       	add	r25, r25
     4be:	89 1b       	sub	r24, r25
     4c0:	f6 01       	movw	r30, r12
     4c2:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
     4c4:	0e 94 cc 00 	call	0x198	; 0x198 <i2c_readAck>
     4c8:	98 2f       	mov	r25, r24
     4ca:	92 95       	swap	r25
     4cc:	9f 70       	andi	r25, 0x0F	; 15
     4ce:	29 2f       	mov	r18, r25
     4d0:	22 0f       	add	r18, r18
     4d2:	92 0f       	add	r25, r18
     4d4:	99 0f       	add	r25, r25
     4d6:	89 1b       	sub	r24, r25
     4d8:	f7 01       	movw	r30, r14
     4da:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
     4dc:	0e 94 cc 00 	call	0x198	; 0x198 <i2c_readAck>
     4e0:	98 2f       	mov	r25, r24
     4e2:	92 95       	swap	r25
     4e4:	9f 70       	andi	r25, 0x0F	; 15
     4e6:	29 2f       	mov	r18, r25
     4e8:	22 0f       	add	r18, r18
     4ea:	92 0f       	add	r25, r18
     4ec:	99 0f       	add	r25, r25
     4ee:	89 1b       	sub	r24, r25
     4f0:	f8 01       	movw	r30, r16
     4f2:	80 83       	st	Z, r24
	*dsem = ds1307_bcd2dec(i2c_readAck());
     4f4:	0e 94 cc 00 	call	0x198	; 0x198 <i2c_readAck>
     4f8:	98 2f       	mov	r25, r24
     4fa:	92 95       	swap	r25
     4fc:	9f 70       	andi	r25, 0x0F	; 15
     4fe:	29 2f       	mov	r18, r25
     500:	22 0f       	add	r18, r18
     502:	92 0f       	add	r25, r18
     504:	99 0f       	add	r25, r25
     506:	89 1b       	sub	r24, r25
     508:	f4 01       	movw	r30, r8
     50a:	80 83       	st	Z, r24
	*day = ds1307_bcd2dec(i2c_readAck());
     50c:	0e 94 cc 00 	call	0x198	; 0x198 <i2c_readAck>
     510:	98 2f       	mov	r25, r24
     512:	92 95       	swap	r25
     514:	9f 70       	andi	r25, 0x0F	; 15
     516:	29 2f       	mov	r18, r25
     518:	22 0f       	add	r18, r18
     51a:	92 0f       	add	r25, r18
     51c:	99 0f       	add	r25, r25
     51e:	89 1b       	sub	r24, r25
     520:	f5 01       	movw	r30, r10
     522:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
     524:	0e 94 cc 00 	call	0x198	; 0x198 <i2c_readAck>
     528:	98 2f       	mov	r25, r24
     52a:	92 95       	swap	r25
     52c:	9f 70       	andi	r25, 0x0F	; 15
     52e:	29 2f       	mov	r18, r25
     530:	22 0f       	add	r18, r18
     532:	92 0f       	add	r25, r18
     534:	99 0f       	add	r25, r25
     536:	89 1b       	sub	r24, r25
     538:	88 83       	st	Y, r24
	*year = ds1307_bcd2dec(i2c_readNak());
     53a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2c_readNak>
     53e:	98 2f       	mov	r25, r24
     540:	92 95       	swap	r25
     542:	9f 70       	andi	r25, 0x0F	; 15
     544:	29 2f       	mov	r18, r25
     546:	22 0f       	add	r18, r18
     548:	92 0f       	add	r25, r18
     54a:	99 0f       	add	r25, r25
     54c:	89 1b       	sub	r24, r25
     54e:	f3 01       	movw	r30, r6
     550:	80 83       	st	Z, r24
	i2c_stop();
     552:	0e 94 b1 00 	call	0x162	; 0x162 <i2c_stop>
}
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	df 90       	pop	r13
     564:	cf 90       	pop	r12
     566:	bf 90       	pop	r11
     568:	af 90       	pop	r10
     56a:	9f 90       	pop	r9
     56c:	8f 90       	pop	r8
     56e:	7f 90       	pop	r7
     570:	6f 90       	pop	r6
     572:	08 95       	ret

00000574 <mi_UART_Init>:
	{
		_delay_ms(20);
		if (bit_is_clear(PIND,PIND6)){
			
			PORTB ^= (1<<PIND5);//alterna el led
			while(bit_is_clear(PIND,PIND6)); // espera a que el ususario deje de pulsar
     574:	9c 01       	movw	r18, r24
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	60 e4       	ldi	r22, 0x40	; 64
     57c:	72 e4       	ldi	r23, 0x42	; 66
     57e:	8f e0       	ldi	r24, 0x0F	; 15
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 01 07 	call	0xe02	; 0xe02 <__divmodsi4>
     586:	21 50       	subi	r18, 0x01	; 1
     588:	31 09       	sbc	r19, r1
     58a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     58e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     592:	88 e1       	ldi	r24, 0x18	; 24
     594:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     598:	8e e0       	ldi	r24, 0x0E	; 14
     59a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     59e:	08 95       	ret

000005a0 <mi_putc>:
     5a0:	e0 ec       	ldi	r30, 0xC0	; 192
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	90 81       	ld	r25, Z
     5a6:	95 ff       	sbrs	r25, 5
     5a8:	fd cf       	rjmp	.-6      	; 0x5a4 <mi_putc+0x4>
     5aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	08 95       	ret

000005b2 <mi_getc>:
     5b2:	e0 ec       	ldi	r30, 0xC0	; 192
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	88 23       	and	r24, r24
     5ba:	ec f7       	brge	.-6      	; 0x5b6 <mi_getc+0x4>
     5bc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     5c0:	08 95       	ret

000005c2 <enviarCadena>:
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	ec 01       	movw	r28, r24
     5c8:	88 81       	ld	r24, Y
     5ca:	88 23       	and	r24, r24
     5cc:	31 f0       	breq	.+12     	; 0x5da <enviarCadena+0x18>
     5ce:	21 96       	adiw	r28, 0x01	; 1
     5d0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <mi_putc>
     5d4:	89 91       	ld	r24, Y+
     5d6:	81 11       	cpse	r24, r1
     5d8:	fb cf       	rjmp	.-10     	; 0x5d0 <enviarCadena+0xe>
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <adc_init>:
     5e2:	ec e7       	ldi	r30, 0x7C	; 124
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	80 64       	ori	r24, 0x40	; 64
     5ea:	80 83       	st	Z, r24
     5ec:	ea e7       	ldi	r30, 0x7A	; 122
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	87 68       	ori	r24, 0x87	; 135
     5f4:	80 83       	st	Z, r24
     5f6:	08 95       	ret

000005f8 <adc_read>:
     5f8:	ec e7       	ldi	r30, 0x7C	; 124
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	90 81       	ld	r25, Z
     5fe:	90 7f       	andi	r25, 0xF0	; 240
     600:	90 83       	st	Z, r25
     602:	90 81       	ld	r25, Z
     604:	89 2b       	or	r24, r25
     606:	80 83       	st	Z, r24
     608:	ea e7       	ldi	r30, 0x7A	; 122
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	80 64       	ori	r24, 0x40	; 64
     610:	80 83       	st	Z, r24
     612:	80 81       	ld	r24, Z
     614:	86 fd       	sbrc	r24, 6
     616:	fd cf       	rjmp	.-6      	; 0x612 <adc_read+0x1a>
     618:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     61c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     620:	08 95       	ret

00000622 <LDR>:
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	64 97       	sbiw	r28, 0x14	; 20
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <adc_read>
     644:	8c 01       	movw	r16, r24
     646:	1f 93       	push	r17
     648:	8f 93       	push	r24
     64a:	8e e0       	ldi	r24, 0x0E	; 14
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	9f 93       	push	r25
     650:	8f 93       	push	r24
     652:	ce 01       	movw	r24, r28
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	7c 01       	movw	r14, r24
     658:	9f 93       	push	r25
     65a:	8f 93       	push	r24
     65c:	0e 94 51 07 	call	0xea2	; 0xea2 <sprintf>
     660:	c7 01       	movw	r24, r14
     662:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	04 3f       	cpi	r16, 0xF4	; 244
     674:	11 40       	sbci	r17, 0x01	; 1
     676:	60 f4       	brcc	.+24     	; 0x690 <LDR+0x6e>
     678:	5b 9a       	sbi	0x0b, 3	; 11
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <NOCHE+0x1>
     682:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <NOCHE>
     686:	87 e1       	ldi	r24, 0x17	; 23
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     68e:	09 c0       	rjmp	.+18     	; 0x6a2 <LDR+0x80>
     690:	5b 98       	cbi	0x0b, 3	; 11
     692:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <NOCHE+0x1>
     696:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <NOCHE>
     69a:	85 e3       	ldi	r24, 0x35	; 53
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     6a2:	64 96       	adiw	r28, 0x14	; 20
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	08 95       	ret

000006bc <servo>:
     6bc:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <__data_end>
     6c0:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <__data_end+0x1>
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	f9 f4       	brne	.+62     	; 0x706 <servo+0x4a>
     6c8:	81 e5       	ldi	r24, 0x51	; 81
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     6d0:	ea e8       	ldi	r30, 0x8A	; 138
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	84 ea       	ldi	r24, 0xA4	; 164
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	91 83       	std	Z+1, r25	; 0x01
     6da:	80 83       	st	Z, r24
     6dc:	2f ef       	ldi	r18, 0xFF	; 255
     6de:	87 ea       	ldi	r24, 0xA7	; 167
     6e0:	91 e6       	ldi	r25, 0x61	; 97
     6e2:	21 50       	subi	r18, 0x01	; 1
     6e4:	80 40       	sbci	r24, 0x00	; 0
     6e6:	90 40       	sbci	r25, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <servo+0x26>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <servo+0x30>
     6ec:	00 00       	nop
     6ee:	88 ec       	ldi	r24, 0xC8	; 200
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	91 83       	std	Z+1, r25	; 0x01
     6f4:	80 83       	st	Z, r24
     6f6:	84 e6       	ldi	r24, 0x64	; 100
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     6fe:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <__data_end+0x1>
     702:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <__data_end>
     706:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <Porton>
     70a:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <Porton+0x1>
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f9 f4       	brne	.+62     	; 0x750 <servo+0x94>
     712:	87 e7       	ldi	r24, 0x77	; 119
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     71a:	e8 e8       	ldi	r30, 0x88	; 136
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	84 ea       	ldi	r24, 0xA4	; 164
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	91 83       	std	Z+1, r25	; 0x01
     724:	80 83       	st	Z, r24
     726:	2f ef       	ldi	r18, 0xFF	; 255
     728:	87 ea       	ldi	r24, 0xA7	; 167
     72a:	91 e6       	ldi	r25, 0x61	; 97
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	80 40       	sbci	r24, 0x00	; 0
     730:	90 40       	sbci	r25, 0x00	; 0
     732:	e1 f7       	brne	.-8      	; 0x72c <servo+0x70>
     734:	00 c0       	rjmp	.+0      	; 0x736 <servo+0x7a>
     736:	00 00       	nop
     738:	88 ec       	ldi	r24, 0xC8	; 200
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	80 83       	st	Z, r24
     740:	8a e8       	ldi	r24, 0x8A	; 138
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     748:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <Porton+0x1>
     74c:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <Porton>
     750:	08 95       	ret

00000752 <__vector_1>:
     752:	1f 92       	push	r1
     754:	0f 92       	push	r0
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	0f 92       	push	r0
     75a:	11 24       	eor	r1, r1
     75c:	2f 93       	push	r18
     75e:	3f 93       	push	r19
     760:	4f 93       	push	r20
     762:	5f 93       	push	r21
     764:	6f 93       	push	r22
     766:	7f 93       	push	r23
     768:	8f 93       	push	r24
     76a:	9f 93       	push	r25
     76c:	af 93       	push	r26
     76e:	bf 93       	push	r27
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
     774:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <NOCHE>
     778:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <NOCHE+0x1>
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	29 f4       	brne	.+10     	; 0x78a <__vector_1+0x38>
     780:	58 98       	cbi	0x0b, 0	; 11
     782:	8d e9       	ldi	r24, 0x9D	; 157
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <Porton+0x1>
     792:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <Porton>
     796:	0e 94 5e 03 	call	0x6bc	; 0x6bc <servo>
     79a:	ff 91       	pop	r31
     79c:	ef 91       	pop	r30
     79e:	bf 91       	pop	r27
     7a0:	af 91       	pop	r26
     7a2:	9f 91       	pop	r25
     7a4:	8f 91       	pop	r24
     7a6:	7f 91       	pop	r23
     7a8:	6f 91       	pop	r22
     7aa:	5f 91       	pop	r21
     7ac:	4f 91       	pop	r20
     7ae:	3f 91       	pop	r19
     7b0:	2f 91       	pop	r18
     7b2:	0f 90       	pop	r0
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	0f 90       	pop	r0
     7b8:	1f 90       	pop	r1
     7ba:	18 95       	reti

000007bc <main>:
		}
	}
}
/********MAIN********/
int main(void) {
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	ce 56       	subi	r28, 0x6E	; 110
     7c6:	d1 09       	sbc	r29, r1
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
	char xhorario[16];
	uint8_t aux[16];
	char c,x1,x;
	uint8_t n1,cant=0;
	uint8_t diaAlarma[7]= {0};
     7d2:	fe 01       	movw	r30, r28
     7d4:	b1 96       	adiw	r30, 0x21	; 33
     7d6:	87 e0       	ldi	r24, 0x07	; 7
     7d8:	df 01       	movw	r26, r30
     7da:	1d 92       	st	X+, r1
     7dc:	8a 95       	dec	r24
     7de:	e9 f7       	brne	.-6      	; 0x7da <main+0x1e>

	//entrada
	DDRD &=~ (1<<DDD2);//SIR
     7e0:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PIND2);
     7e2:	5a 9a       	sbi	0x0b, 2	; 11
	DDRB &=~ (1<<DDD6);//pulsador
     7e4:	26 98       	cbi	0x04, 6	; 4
	PORTB |= (1<<PIND6);
     7e6:	2e 9a       	sbi	0x05, 6	; 5
	DDRC &=~ (1<<DDC1); //pulsador
     7e8:	39 98       	cbi	0x07, 1	; 7
	PORTC |=  (1<<PINC1);
     7ea:	41 9a       	sbi	0x08, 1	; 8
	DDRC &=~ (1<<DDC2); //pulsador
     7ec:	3a 98       	cbi	0x07, 2	; 7
	PORTC |=  (1<<PINC2);
     7ee:	42 9a       	sbi	0x08, 2	; 8
	DDRC &=~ (1<<DDC3); //pulsador
     7f0:	3b 98       	cbi	0x07, 3	; 7
	PORTC |=  (1<<PINC3);
     7f2:	43 9a       	sbi	0x08, 3	; 8
	// salida
	DDRD |= (1<<DDD0);//RIEGO
     7f4:	50 9a       	sbi	0x0a, 0	; 10
	PORTD &=~ (1<<PIND0);
     7f6:	58 98       	cbi	0x0b, 0	; 11
	DDRD |= (1<<DDD1); //LUZ GARAGE
     7f8:	51 9a       	sbi	0x0a, 1	; 10
	PORTD &=~ (1<<PIND1);
     7fa:	59 98       	cbi	0x0b, 1	; 11
	DDRD |= (1<<DDD3); //PATIO
     7fc:	53 9a       	sbi	0x0a, 3	; 10
	PORTD &=~ (1<<PIND3);
     7fe:	5b 98       	cbi	0x0b, 3	; 11
	DDRD |= (1<<DDD4); //BANIO
     800:	54 9a       	sbi	0x0a, 4	; 10
	PORTD &=~ (1<<PIND4);
     802:	5c 98       	cbi	0x0b, 4	; 11
	DDRD |= (1<<DDD5); //PIEZA
     804:	55 9a       	sbi	0x0a, 5	; 10
	PORTD &=~ (1<<PIND5);
     806:	5d 98       	cbi	0x0b, 5	; 11
	
	//init uart
	mi_UART_Init(BAUD);
     808:	80 e8       	ldi	r24, 0x80	; 128
     80a:	95 e2       	ldi	r25, 0x25	; 37
     80c:	0e 94 ba 02 	call	0x574	; 0x574 <mi_UART_Init>
	//ADC
	adc_init();
     810:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <adc_init>
	//INTERRUPCIONES
	EICRA |= _BV(ISC11);
     814:	e9 e6       	ldi	r30, 0x69	; 105
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	88 60       	ori	r24, 0x08	; 8
     81c:	80 83       	st	Z, r24
	EIMSK |= _BV(INT0) | _BV(INT1);
     81e:	8d b3       	in	r24, 0x1d	; 29
     820:	83 60       	ori	r24, 0x03	; 3
     822:	8d bb       	out	0x1d, r24	; 29
	sei();
     824:	78 94       	sei
	
	//SERVO
	DDRB |= (1<<PINB1) | (1<<PINB2);
     826:	84 b1       	in	r24, 0x04	; 4
     828:	86 60       	ori	r24, 0x06	; 6
     82a:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << WGM11) | (1 << COM1A1) | (1<<COM1B1);
     82c:	e0 e8       	ldi	r30, 0x80	; 128
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	82 6a       	ori	r24, 0xA2	; 162
     834:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) |(1<<CS10)|(1<<CS11);
     836:	e1 e8       	ldi	r30, 0x81	; 129
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	8b 61       	ori	r24, 0x1B	; 27
     83e:	80 83       	st	Z, r24
	ICR1 = 4999;	
     840:	87 e8       	ldi	r24, 0x87	; 135
     842:	93 e1       	ldi	r25, 0x13	; 19
     844:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     848:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 200 ;
     84c:	88 ec       	ldi	r24, 0xC8	; 200
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     854:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 200 ;
     858:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     85c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	//init ds1307
	ds1307_init();
     860:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <ds1307_init>
	sei();
     864:	78 94       	sei
	char buf[50];
	char* days[7]= {"Domingo","Lunes","Martes","Miercoles","Jueves","Viernes","Sabado"};
     866:	8e e0       	ldi	r24, 0x0E	; 14
     868:	e0 e0       	ldi	r30, 0x00	; 0
     86a:	f1 e0       	ldi	r31, 0x01	; 1
     86c:	de 01       	movw	r26, r28
     86e:	a6 5a       	subi	r26, 0xA6	; 166
     870:	bf 4f       	sbci	r27, 0xFF	; 255
     872:	01 90       	ld	r0, Z+
     874:	0d 92       	st	X+, r0
     876:	8a 95       	dec	r24
     878:	e1 f7       	brne	.-8      	; 0x872 <main+0xb6>
	
	uint8_t anio = 0;
     87a:	a9 96       	adiw	r28, 0x29	; 41
     87c:	1f ae       	std	Y+63, r1	; 0x3f
     87e:	a9 97       	sbiw	r28, 0x29	; 41
	uint8_t mes = 0;
     880:	aa 96       	adiw	r28, 0x2a	; 42
     882:	1f ae       	std	Y+63, r1	; 0x3f
     884:	aa 97       	sbiw	r28, 0x2a	; 42
	uint8_t dia = 0;
     886:	ab 96       	adiw	r28, 0x2b	; 43
     888:	1f ae       	std	Y+63, r1	; 0x3f
     88a:	ab 97       	sbiw	r28, 0x2b	; 43
	uint8_t hora = 0, horaAlarma1=0, horaAlarma2=0;
     88c:	ac 96       	adiw	r28, 0x2c	; 44
     88e:	1f ae       	std	Y+63, r1	; 0x3f
     890:	ac 97       	sbiw	r28, 0x2c	; 44
	uint8_t minuto = 0, minutoAlarma1=0, minutoAlarma2=0;
     892:	ad 96       	adiw	r28, 0x2d	; 45
     894:	1f ae       	std	Y+63, r1	; 0x3f
     896:	ad 97       	sbiw	r28, 0x2d	; 45
	uint8_t segundo = 0;
     898:	ae 96       	adiw	r28, 0x2e	; 46
     89a:	1f ae       	std	Y+63, r1	; 0x3f
     89c:	ae 97       	sbiw	r28, 0x2e	; 46
	uint8_t sem=0;
     89e:	af 96       	adiw	r28, 0x2f	; 47
     8a0:	1f ae       	std	Y+63, r1	; 0x3f
     8a2:	af 97       	sbiw	r28, 0x2f	; 47
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a4:	ef e3       	ldi	r30, 0x3F	; 63
     8a6:	fc e9       	ldi	r31, 0x9C	; 156
     8a8:	31 97       	sbiw	r30, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <main+0xec>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <main+0xf2>
     8ae:	00 00       	nop
	
	_delay_ms(10);
	enviarCadena("Desea configurar la hora?\r\n");
     8b0:	88 eb       	ldi	r24, 0xB8	; 184
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     8b8:	ff ef       	ldi	r31, 0xFF	; 255
     8ba:	26 e7       	ldi	r18, 0x76	; 118
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	f1 50       	subi	r31, 0x01	; 1
     8c0:	20 40       	sbci	r18, 0x00	; 0
     8c2:	80 40       	sbci	r24, 0x00	; 0
     8c4:	e1 f7       	brne	.-8      	; 0x8be <main+0x102>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <main+0x10c>
     8c8:	00 00       	nop
	_delay_ms(30);
	enviarCadena(" 1. SI - 2. NO \r\n");
     8ca:	84 ed       	ldi	r24, 0xD4	; 212
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
	
	x= mi_getc();
     8d2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mi_getc>

	switch(x){
     8d6:	81 33       	cpi	r24, 0x31	; 49
     8d8:	21 f0       	breq	.+8      	; 0x8e2 <main+0x126>
     8da:	82 33       	cpi	r24, 0x32	; 50
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <main+0x124>
     8de:	b7 c0       	rjmp	.+366    	; 0xa4e <__stack+0x14f>
     8e0:	b2 c0       	rjmp	.+356    	; 0xa46 <__stack+0x147>
		case '1':
		enviarCadena("\nIngrese fecha con el siguiente formato\r\n");
     8e2:	86 ee       	ldi	r24, 0xE6	; 230
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("dd.mm.aa\r\n");
     8ea:	80 e1       	ldi	r24, 0x10	; 16
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     8f2:	9f ef       	ldi	r25, 0xFF	; 255
     8f4:	a6 e7       	ldi	r26, 0x76	; 118
     8f6:	b1 e0       	ldi	r27, 0x01	; 1
     8f8:	91 50       	subi	r25, 0x01	; 1
     8fa:	a0 40       	sbci	r26, 0x00	; 0
     8fc:	b0 40       	sbci	r27, 0x00	; 0
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <main+0x13c>
     900:	00 c0       	rjmp	.+0      	; 0x902 <__stack+0x3>
     902:	00 00       	nop
     904:	fe 01       	movw	r30, r28
     906:	31 96       	adiw	r30, 0x01	; 1
     908:	7f 01       	movw	r14, r30
     90a:	8e 01       	movw	r16, r28
     90c:	07 5f       	subi	r16, 0xF7	; 247
     90e:	1f 4f       	sbci	r17, 0xFF	; 255
     910:	5f 01       	movw	r10, r30
		_delay_ms(30);
		
		for (int i=0;i<8;i++)
		{
			xhorario[i]=mi_getc();
     912:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mi_getc>
     916:	d5 01       	movw	r26, r10
     918:	8d 93       	st	X+, r24
     91a:	5d 01       	movw	r10, r26
		case '1':
		enviarCadena("\nIngrese fecha con el siguiente formato\r\n");
		enviarCadena("dd.mm.aa\r\n");
		_delay_ms(30);
		
		for (int i=0;i<8;i++)
     91c:	a0 17       	cp	r26, r16
     91e:	b1 07       	cpc	r27, r17
     920:	c1 f7       	brne	.-16     	; 0x912 <__stack+0x13>
     922:	57 01       	movw	r10, r14
		{
			xhorario[i]=mi_getc();
		}
		for (int i=0;i<8;i++)
		{
			putc(xhorario[i]);
     924:	f5 01       	movw	r30, r10
     926:	81 91       	ld	r24, Z+
     928:	5f 01       	movw	r10, r30
     92a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <mi_putc>
		
		for (int i=0;i<8;i++)
		{
			xhorario[i]=mi_getc();
		}
		for (int i=0;i<8;i++)
     92e:	a0 16       	cp	r10, r16
     930:	b1 06       	cpc	r11, r17
     932:	c1 f7       	brne	.-16     	; 0x924 <__stack+0x25>
     934:	fe 01       	movw	r30, r28
     936:	71 96       	adiw	r30, 0x11	; 17
		{
			putc(xhorario[i]);
		}
		for (int i=0;i<8;i++)
		{
			aux[i]=xhorario[i]-'0';
     938:	d7 01       	movw	r26, r14
     93a:	8d 91       	ld	r24, X+
     93c:	7d 01       	movw	r14, r26
     93e:	80 53       	subi	r24, 0x30	; 48
     940:	81 93       	st	Z+, r24
		}
		for (int i=0;i<8;i++)
		{
			putc(xhorario[i]);
		}
		for (int i=0;i<8;i++)
     942:	a0 17       	cp	r26, r16
     944:	b1 07       	cpc	r27, r17
     946:	c1 f7       	brne	.-16     	; 0x938 <__stack+0x39>
		{
			aux[i]=xhorario[i]-'0';
		}
		dia=aux[0]*10+aux[1];
     948:	89 89       	ldd	r24, Y+17	; 0x11
     94a:	88 0f       	add	r24, r24
     94c:	98 2f       	mov	r25, r24
     94e:	99 0f       	add	r25, r25
     950:	99 0f       	add	r25, r25
     952:	89 0f       	add	r24, r25
     954:	9a 89       	ldd	r25, Y+18	; 0x12
     956:	89 0f       	add	r24, r25
     958:	ab 96       	adiw	r28, 0x2b	; 43
     95a:	8f af       	std	Y+63, r24	; 0x3f
     95c:	ab 97       	sbiw	r28, 0x2b	; 43
		mes=aux[3]*10+aux[4];
     95e:	8c 89       	ldd	r24, Y+20	; 0x14
     960:	88 0f       	add	r24, r24
     962:	98 2f       	mov	r25, r24
     964:	99 0f       	add	r25, r25
     966:	99 0f       	add	r25, r25
     968:	89 0f       	add	r24, r25
     96a:	9d 89       	ldd	r25, Y+21	; 0x15
     96c:	89 0f       	add	r24, r25
     96e:	aa 96       	adiw	r28, 0x2a	; 42
     970:	8f af       	std	Y+63, r24	; 0x3f
     972:	aa 97       	sbiw	r28, 0x2a	; 42
		anio=aux[6]*10+aux[7];
     974:	8f 89       	ldd	r24, Y+23	; 0x17
     976:	88 0f       	add	r24, r24
     978:	98 2f       	mov	r25, r24
     97a:	99 0f       	add	r25, r25
     97c:	99 0f       	add	r25, r25
     97e:	89 0f       	add	r24, r25
     980:	98 8d       	ldd	r25, Y+24	; 0x18
     982:	89 0f       	add	r24, r25
     984:	a9 96       	adiw	r28, 0x29	; 41
     986:	8f af       	std	Y+63, r24	; 0x3f
     988:	a9 97       	sbiw	r28, 0x29	; 41
		
		enviarCadena("\nIngrese hora con el siguiente formato\r\n");
     98a:	8b e1       	ldi	r24, 0x1B	; 27
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("hh.mm.ss\r\n");
     992:	84 e4       	ldi	r24, 0x44	; 68
     994:	92 e0       	ldi	r25, 0x02	; 2
     996:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     99a:	bf ef       	ldi	r27, 0xFF	; 255
     99c:	e6 e7       	ldi	r30, 0x76	; 118
     99e:	f1 e0       	ldi	r31, 0x01	; 1
     9a0:	b1 50       	subi	r27, 0x01	; 1
     9a2:	e0 40       	sbci	r30, 0x00	; 0
     9a4:	f0 40       	sbci	r31, 0x00	; 0
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <__stack+0xa1>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <__stack+0xab>
     9aa:	00 00       	nop
     9ac:	7e 01       	movw	r14, r28
     9ae:	21 e1       	ldi	r18, 0x11	; 17
     9b0:	e2 0e       	add	r14, r18
     9b2:	f1 1c       	adc	r15, r1
     9b4:	58 01       	movw	r10, r16
		_delay_ms(30);
		
		for (int i=8;i<16;i++)
		{
			xhorario[i]=mi_getc();
     9b6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mi_getc>
     9ba:	d5 01       	movw	r26, r10
     9bc:	8d 93       	st	X+, r24
     9be:	5d 01       	movw	r10, r26
		
		enviarCadena("\nIngrese hora con el siguiente formato\r\n");
		enviarCadena("hh.mm.ss\r\n");
		_delay_ms(30);
		
		for (int i=8;i<16;i++)
     9c0:	ea 16       	cp	r14, r26
     9c2:	fb 06       	cpc	r15, r27
     9c4:	c1 f7       	brne	.-16     	; 0x9b6 <__stack+0xb7>
     9c6:	58 01       	movw	r10, r16
		{
			xhorario[i]=mi_getc();
		}
		for (int i=8;i<16;i++)
		{
			putc(xhorario[i]);
     9c8:	f5 01       	movw	r30, r10
     9ca:	81 91       	ld	r24, Z+
     9cc:	5f 01       	movw	r10, r30
     9ce:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <mi_putc>
		
		for (int i=8;i<16;i++)
		{
			xhorario[i]=mi_getc();
		}
		for (int i=8;i<16;i++)
     9d2:	ea 14       	cp	r14, r10
     9d4:	fb 04       	cpc	r15, r11
     9d6:	c1 f7       	brne	.-16     	; 0x9c8 <__stack+0xc9>
     9d8:	fe 01       	movw	r30, r28
     9da:	79 96       	adiw	r30, 0x19	; 25
		{
			putc(xhorario[i]);
		}
		for (int i=8;i<16;i++)
		{
			aux[i]=xhorario[i]-'0';
     9dc:	d8 01       	movw	r26, r16
     9de:	8d 91       	ld	r24, X+
     9e0:	8d 01       	movw	r16, r26
     9e2:	80 53       	subi	r24, 0x30	; 48
     9e4:	81 93       	st	Z+, r24
		}
		for (int i=8;i<16;i++)
		{
			putc(xhorario[i]);
		}
		for (int i=8;i<16;i++)
     9e6:	ea 16       	cp	r14, r26
     9e8:	fb 06       	cpc	r15, r27
     9ea:	c1 f7       	brne	.-16     	; 0x9dc <__stack+0xdd>
		{
			aux[i]=xhorario[i]-'0';
		}
		hora=aux[8]*10+aux[9];
     9ec:	89 8d       	ldd	r24, Y+25	; 0x19
     9ee:	88 0f       	add	r24, r24
     9f0:	28 2f       	mov	r18, r24
     9f2:	22 0f       	add	r18, r18
     9f4:	22 0f       	add	r18, r18
     9f6:	28 0f       	add	r18, r24
     9f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9fa:	28 0f       	add	r18, r24
     9fc:	ac 96       	adiw	r28, 0x2c	; 44
     9fe:	2f af       	std	Y+63, r18	; 0x3f
     a00:	ac 97       	sbiw	r28, 0x2c	; 44
		minuto=aux[11]*10+aux[12];
     a02:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a04:	88 0f       	add	r24, r24
     a06:	08 2f       	mov	r16, r24
     a08:	00 0f       	add	r16, r16
     a0a:	00 0f       	add	r16, r16
     a0c:	08 0f       	add	r16, r24
     a0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a10:	08 0f       	add	r16, r24
     a12:	ad 96       	adiw	r28, 0x2d	; 45
     a14:	0f af       	std	Y+63, r16	; 0x3f
     a16:	ad 97       	sbiw	r28, 0x2d	; 45
		segundo=aux[14]*10+aux[15];
     a18:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a1a:	88 0f       	add	r24, r24
     a1c:	e8 2e       	mov	r14, r24
     a1e:	ee 0c       	add	r14, r14
     a20:	ee 0c       	add	r14, r14
     a22:	e8 0e       	add	r14, r24
     a24:	88 a1       	ldd	r24, Y+32	; 0x20
     a26:	e8 0e       	add	r14, r24
     a28:	ae 96       	adiw	r28, 0x2e	; 46
     a2a:	ef ae       	std	Y+63, r14	; 0x3f
     a2c:	ae 97       	sbiw	r28, 0x2e	; 46
		
		ds1307_setdate(anio, mes, dia, hora, minuto, segundo);
     a2e:	ab 96       	adiw	r28, 0x2b	; 43
     a30:	4f ad       	ldd	r20, Y+63	; 0x3f
     a32:	ab 97       	sbiw	r28, 0x2b	; 43
     a34:	aa 96       	adiw	r28, 0x2a	; 42
     a36:	6f ad       	ldd	r22, Y+63	; 0x3f
     a38:	aa 97       	sbiw	r28, 0x2a	; 42
     a3a:	a9 96       	adiw	r28, 0x29	; 41
     a3c:	8f ad       	ldd	r24, Y+63	; 0x3f
     a3e:	a9 97       	sbiw	r28, 0x29	; 41
     a40:	0e 94 39 01 	call	0x272	; 0x272 <ds1307_setdate>
		
		break;
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <__stack+0x14f>
		case '2':
		break;
		default:
		enviarCadena("valor invalido\r\n");
     a46:	8f e4       	ldi	r24, 0x4F	; 79
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     a4e:	ef e3       	ldi	r30, 0x3F	; 63
     a50:	fc e9       	ldi	r31, 0x9C	; 156
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <__stack+0x153>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <__stack+0x159>
     a58:	00 00       	nop
		break;
	}
	
	_delay_ms(10);
	enviarCadena("\nDesea configurar horario del sistema de riego?\r\n");
     a5a:	80 e6       	ldi	r24, 0x60	; 96
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     a62:	ff ef       	ldi	r31, 0xFF	; 255
     a64:	26 e7       	ldi	r18, 0x76	; 118
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	f1 50       	subi	r31, 0x01	; 1
     a6a:	20 40       	sbci	r18, 0x00	; 0
     a6c:	80 40       	sbci	r24, 0x00	; 0
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <__stack+0x169>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <__stack+0x173>
     a72:	00 00       	nop
	_delay_ms(30);
	enviarCadena(" 1. SI - 2. NO \r\n");
     a74:	84 ed       	ldi	r24, 0xD4	; 212
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
	x= mi_getc();
     a7c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mi_getc>
	
	switch(x){
     a80:	81 33       	cpi	r24, 0x31	; 49
     a82:	21 f0       	breq	.+8      	; 0xa8c <__stack+0x18d>
     a84:	82 33       	cpi	r24, 0x32	; 50
     a86:	09 f4       	brne	.+2      	; 0xa8a <__stack+0x18b>
     a88:	e5 c0       	rjmp	.+458    	; 0xc54 <__stack+0x355>
     a8a:	da c0       	rjmp	.+436    	; 0xc40 <__stack+0x341>
		case '1':
		enviarCadena("\nIngrese cantidad de veces a la semana\r\n");
     a8c:	82 e9       	ldi	r24, 0x92	; 146
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("Si desea todos los dias ingrese 7\r\n");
     a94:	8b eb       	ldi	r24, 0xBB	; 187
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		
		c=mi_getc();
     a9c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mi_getc>
		cant= c - '0';
     aa0:	0f 2e       	mov	r0, r31
     aa2:	f0 ed       	ldi	r31, 0xD0	; 208
     aa4:	6f 2e       	mov	r6, r31
     aa6:	f0 2d       	mov	r31, r0
     aa8:	68 0e       	add	r6, r24
		
		enviarCadena("Ingrese\r\n");
     aaa:	8f ed       	ldi	r24, 0xDF	; 223
     aac:	92 e0       	ldi	r25, 0x02	; 2
     aae:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("0. Domingo\r\n");
     ab2:	89 ee       	ldi	r24, 0xE9	; 233
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("1. Lunes\r\n");
     aba:	86 ef       	ldi	r24, 0xF6	; 246
     abc:	92 e0       	ldi	r25, 0x02	; 2
     abe:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("2. Martes\r\n");
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	93 e0       	ldi	r25, 0x03	; 3
     ac6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("3. Miercoles\r\n");
     aca:	8d e0       	ldi	r24, 0x0D	; 13
     acc:	93 e0       	ldi	r25, 0x03	; 3
     ace:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("4. Jueves\r\n");
     ad2:	8c e1       	ldi	r24, 0x1C	; 28
     ad4:	93 e0       	ldi	r25, 0x03	; 3
     ad6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("5. Viernes\r\n");
     ada:	88 e2       	ldi	r24, 0x28	; 40
     adc:	93 e0       	ldi	r25, 0x03	; 3
     ade:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("6. Sabado\r\n");
     ae2:	85 e3       	ldi	r24, 0x35	; 53
     ae4:	93 e0       	ldi	r25, 0x03	; 3
     ae6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		if (cant==7)
     aea:	97 e0       	ldi	r25, 0x07	; 7
     aec:	69 16       	cp	r6, r25
     aee:	19 f0       	breq	.+6      	; 0xaf6 <__stack+0x1f7>
				diaAlarma[i]=i;
			}
		}
		else
		{
			for (int i=0; i<cant; i++)
     af0:	61 10       	cpse	r6, r1
     af2:	09 c0       	rjmp	.+18     	; 0xb06 <__stack+0x207>
     af4:	1b c0       	rjmp	.+54     	; 0xb2c <__stack+0x22d>
     af6:	fe 01       	movw	r30, r28
     af8:	b1 96       	adiw	r30, 0x21	; 33
		enviarCadena("2. Martes\r\n");
		enviarCadena("3. Miercoles\r\n");
		enviarCadena("4. Jueves\r\n");
		enviarCadena("5. Viernes\r\n");
		enviarCadena("6. Sabado\r\n");
		if (cant==7)
     afa:	80 e0       	ldi	r24, 0x00	; 0
		{
			for (int i=0; i<cant; i++)
			{
				diaAlarma[i]=i;
     afc:	81 93       	st	Z+, r24
     afe:	8f 5f       	subi	r24, 0xFF	; 255
		enviarCadena("4. Jueves\r\n");
		enviarCadena("5. Viernes\r\n");
		enviarCadena("6. Sabado\r\n");
		if (cant==7)
		{
			for (int i=0; i<cant; i++)
     b00:	87 30       	cpi	r24, 0x07	; 7
     b02:	e1 f7       	brne	.-8      	; 0xafc <__stack+0x1fd>
     b04:	13 c0       	rjmp	.+38     	; 0xb2c <__stack+0x22d>
     b06:	8e 01       	movw	r16, r28
     b08:	0f 5d       	subi	r16, 0xDF	; 223
     b0a:	1f 4f       	sbci	r17, 0xFF	; 255
     b0c:	58 01       	movw	r10, r16
     b0e:	a6 0c       	add	r10, r6
     b10:	b1 1c       	adc	r11, r1
		}
		else
		{
			for (int i=0; i<cant; i++)
			{
				x1=getc();
     b12:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mi_getc>
     b16:	f8 2e       	mov	r15, r24
				putc(x1);
     b18:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <mi_putc>
				n1= x1 - '0';
				diaAlarma[i]=n1;
     b1c:	80 ed       	ldi	r24, 0xD0	; 208
     b1e:	8f 0d       	add	r24, r15
     b20:	d8 01       	movw	r26, r16
     b22:	8d 93       	st	X+, r24
     b24:	8d 01       	movw	r16, r26
				diaAlarma[i]=i;
			}
		}
		else
		{
			for (int i=0; i<cant; i++)
     b26:	aa 16       	cp	r10, r26
     b28:	bb 06       	cpc	r11, r27
     b2a:	99 f7       	brne	.-26     	; 0xb12 <__stack+0x213>
				n1= x1 - '0';
				diaAlarma[i]=n1;
			}
		}
		
		enviarCadena("\nIngrese hora de inicio con el siguiente formato\r\n");
     b2c:	81 e4       	ldi	r24, 0x41	; 65
     b2e:	93 e0       	ldi	r25, 0x03	; 3
     b30:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("hh.mm\r\n");
     b34:	84 e7       	ldi	r24, 0x74	; 116
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     b3c:	bf ef       	ldi	r27, 0xFF	; 255
     b3e:	e6 e7       	ldi	r30, 0x76	; 118
     b40:	f1 e0       	ldi	r31, 0x01	; 1
     b42:	b1 50       	subi	r27, 0x01	; 1
     b44:	e0 40       	sbci	r30, 0x00	; 0
     b46:	f0 40       	sbci	r31, 0x00	; 0
     b48:	e1 f7       	brne	.-8      	; 0xb42 <__stack+0x243>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <__stack+0x24d>
     b4c:	00 00       	nop
     b4e:	8e 01       	movw	r16, r28
     b50:	07 5f       	subi	r16, 0xF7	; 247
     b52:	1f 4f       	sbci	r17, 0xFF	; 255
     b54:	7e 01       	movw	r14, r28
     b56:	2e e0       	ldi	r18, 0x0E	; 14
     b58:	e2 0e       	add	r14, r18
     b5a:	f1 1c       	adc	r15, r1
     b5c:	58 01       	movw	r10, r16
		_delay_ms(30);
		
		for (int i=8;i<13;i++)
		{
			xhorario[i]=mi_getc();
     b5e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mi_getc>
     b62:	d5 01       	movw	r26, r10
     b64:	8d 93       	st	X+, r24
     b66:	5d 01       	movw	r10, r26
		
		enviarCadena("\nIngrese hora de inicio con el siguiente formato\r\n");
		enviarCadena("hh.mm\r\n");
		_delay_ms(30);
		
		for (int i=8;i<13;i++)
     b68:	ea 16       	cp	r14, r26
     b6a:	fb 06       	cpc	r15, r27
     b6c:	c1 f7       	brne	.-16     	; 0xb5e <__stack+0x25f>
     b6e:	58 01       	movw	r10, r16
		{
			xhorario[i]=mi_getc();
		}
		for (int i=8;i<13;i++)
		{
			putc(xhorario[i]);
     b70:	f5 01       	movw	r30, r10
     b72:	81 91       	ld	r24, Z+
     b74:	5f 01       	movw	r10, r30
     b76:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <mi_putc>
		
		for (int i=8;i<13;i++)
		{
			xhorario[i]=mi_getc();
		}
		for (int i=8;i<13;i++)
     b7a:	ae 14       	cp	r10, r14
     b7c:	bf 04       	cpc	r11, r15
     b7e:	c1 f7       	brne	.-16     	; 0xb70 <__stack+0x271>
     b80:	2e 01       	movw	r4, r28
     b82:	f9 e1       	ldi	r31, 0x19	; 25
     b84:	4f 0e       	add	r4, r31
     b86:	51 1c       	adc	r5, r1
     b88:	d2 01       	movw	r26, r4
     b8a:	f8 01       	movw	r30, r16
		{
			putc(xhorario[i]);
		}
		for (int i=8;i<13;i++)
		{
			aux[i]=xhorario[i]-'0';
     b8c:	81 91       	ld	r24, Z+
     b8e:	80 53       	subi	r24, 0x30	; 48
     b90:	8d 93       	st	X+, r24
		}
		for (int i=8;i<13;i++)
		{
			putc(xhorario[i]);
		}
		for (int i=8;i<13;i++)
     b92:	ee 16       	cp	r14, r30
     b94:	ff 06       	cpc	r15, r31
     b96:	d1 f7       	brne	.-12     	; 0xb8c <__stack+0x28d>
		{
			aux[i]=xhorario[i]-'0';
		}
		horaAlarma1=aux[8]*10+aux[9];
     b98:	89 8d       	ldd	r24, Y+25	; 0x19
     b9a:	88 0f       	add	r24, r24
     b9c:	b8 2e       	mov	r11, r24
     b9e:	bb 0c       	add	r11, r11
     ba0:	bb 0c       	add	r11, r11
     ba2:	8b 0d       	add	r24, r11
     ba4:	ba 8c       	ldd	r11, Y+26	; 0x1a
     ba6:	b8 0e       	add	r11, r24
		minutoAlarma1=aux[11]*10+aux[12];
     ba8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     baa:	88 0f       	add	r24, r24
     bac:	a8 2e       	mov	r10, r24
     bae:	aa 0c       	add	r10, r10
     bb0:	aa 0c       	add	r10, r10
     bb2:	8a 0d       	add	r24, r10
     bb4:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb6:	a8 0e       	add	r10, r24
		segundo=0;
     bb8:	ae 96       	adiw	r28, 0x2e	; 46
     bba:	1f ae       	std	Y+63, r1	; 0x3f
     bbc:	ae 97       	sbiw	r28, 0x2e	; 46
		
		enviarCadena("\nIngrese hora de fin con el siguiente formato\r\n");
     bbe:	8c e7       	ldi	r24, 0x7C	; 124
     bc0:	93 e0       	ldi	r25, 0x03	; 3
     bc2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("hh.mm\r\n");
     bc6:	84 e7       	ldi	r24, 0x74	; 116
     bc8:	93 e0       	ldi	r25, 0x03	; 3
     bca:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
     bce:	2f ef       	ldi	r18, 0xFF	; 255
     bd0:	86 e7       	ldi	r24, 0x76	; 118
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	21 50       	subi	r18, 0x01	; 1
     bd6:	80 40       	sbci	r24, 0x00	; 0
     bd8:	90 40       	sbci	r25, 0x00	; 0
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <__stack+0x2d5>
     bdc:	00 c0       	rjmp	.+0      	; 0xbde <__stack+0x2df>
     bde:	00 00       	nop
     be0:	48 01       	movw	r8, r16
		_delay_ms(30);
		
		for (int i=8;i<13;i++)
		{
			xhorario[i]=mi_getc();
     be2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mi_getc>
     be6:	d4 01       	movw	r26, r8
     be8:	8d 93       	st	X+, r24
     bea:	4d 01       	movw	r8, r26
		
		enviarCadena("\nIngrese hora de fin con el siguiente formato\r\n");
		enviarCadena("hh.mm\r\n");
		_delay_ms(30);
		
		for (int i=8;i<13;i++)
     bec:	ae 15       	cp	r26, r14
     bee:	bf 05       	cpc	r27, r15
     bf0:	c1 f7       	brne	.-16     	; 0xbe2 <__stack+0x2e3>
     bf2:	48 01       	movw	r8, r16
		{
			xhorario[i]=mi_getc();
		}
		for (int i=8;i<13;i++)
		{
			putc(xhorario[i]);
     bf4:	f4 01       	movw	r30, r8
     bf6:	81 91       	ld	r24, Z+
     bf8:	4f 01       	movw	r8, r30
     bfa:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <mi_putc>
		
		for (int i=8;i<13;i++)
		{
			xhorario[i]=mi_getc();
		}
		for (int i=8;i<13;i++)
     bfe:	e8 14       	cp	r14, r8
     c00:	f9 04       	cpc	r15, r9
     c02:	c1 f7       	brne	.-16     	; 0xbf4 <__stack+0x2f5>
		{
			putc(xhorario[i]);
		}
		for (int i=8;i<13;i++)
		{
			aux[i]=xhorario[i]-'0';
     c04:	d8 01       	movw	r26, r16
     c06:	8d 91       	ld	r24, X+
     c08:	8d 01       	movw	r16, r26
     c0a:	80 53       	subi	r24, 0x30	; 48
     c0c:	f2 01       	movw	r30, r4
     c0e:	81 93       	st	Z+, r24
     c10:	2f 01       	movw	r4, r30
		}
		for (int i=8;i<13;i++)
		{
			putc(xhorario[i]);
		}
		for (int i=8;i<13;i++)
     c12:	ae 15       	cp	r26, r14
     c14:	bf 05       	cpc	r27, r15
     c16:	b1 f7       	brne	.-20     	; 0xc04 <__stack+0x305>
		{
			aux[i]=xhorario[i]-'0';
		}
		horaAlarma2=aux[8]*10+aux[9];
     c18:	89 8d       	ldd	r24, Y+25	; 0x19
     c1a:	88 0f       	add	r24, r24
     c1c:	38 2e       	mov	r3, r24
     c1e:	33 0c       	add	r3, r3
     c20:	33 0c       	add	r3, r3
     c22:	83 0d       	add	r24, r3
     c24:	3a 8c       	ldd	r3, Y+26	; 0x1a
     c26:	38 0e       	add	r3, r24
		minutoAlarma2=aux[11]*10+aux[12];
     c28:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c2a:	88 0f       	add	r24, r24
     c2c:	28 2e       	mov	r2, r24
     c2e:	22 0c       	add	r2, r2
     c30:	22 0c       	add	r2, r2
     c32:	82 0d       	add	r24, r2
     c34:	2d 8c       	ldd	r2, Y+29	; 0x1d
     c36:	28 0e       	add	r2, r24
		segundo=0;
     c38:	ae 96       	adiw	r28, 0x2e	; 46
     c3a:	1f ae       	std	Y+63, r1	; 0x3f
     c3c:	ae 97       	sbiw	r28, 0x2e	; 46
		
		break;
     c3e:	0f c0       	rjmp	.+30     	; 0xc5e <__stack+0x35f>
		case '2':
		break;
		default:
		enviarCadena("valor invalido\r\n");
     c40:	8f e4       	ldi	r24, 0x4F	; 79
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
	
	uint8_t anio = 0;
	uint8_t mes = 0;
	uint8_t dia = 0;
	uint8_t hora = 0, horaAlarma1=0, horaAlarma2=0;
	uint8_t minuto = 0, minutoAlarma1=0, minutoAlarma2=0;
     c48:	21 2c       	mov	r2, r1
     c4a:	a1 2c       	mov	r10, r1
	char* days[7]= {"Domingo","Lunes","Martes","Miercoles","Jueves","Viernes","Sabado"};
	
	uint8_t anio = 0;
	uint8_t mes = 0;
	uint8_t dia = 0;
	uint8_t hora = 0, horaAlarma1=0, horaAlarma2=0;
     c4c:	31 2c       	mov	r3, r1
     c4e:	b1 2c       	mov	r11, r1
/********MAIN********/
int main(void) {
	char xhorario[16];
	uint8_t aux[16];
	char c,x1,x;
	uint8_t n1,cant=0;
     c50:	61 2c       	mov	r6, r1
		break;
		case '2':
		break;
		default:
		enviarCadena("valor invalido\r\n");
		break;
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__stack+0x35f>
	
	uint8_t anio = 0;
	uint8_t mes = 0;
	uint8_t dia = 0;
	uint8_t hora = 0, horaAlarma1=0, horaAlarma2=0;
	uint8_t minuto = 0, minutoAlarma1=0, minutoAlarma2=0;
     c54:	21 2c       	mov	r2, r1
     c56:	a1 2c       	mov	r10, r1
	char* days[7]= {"Domingo","Lunes","Martes","Miercoles","Jueves","Viernes","Sabado"};
	
	uint8_t anio = 0;
	uint8_t mes = 0;
	uint8_t dia = 0;
	uint8_t hora = 0, horaAlarma1=0, horaAlarma2=0;
     c58:	31 2c       	mov	r3, r1
     c5a:	b1 2c       	mov	r11, r1
/********MAIN********/
int main(void) {
	char xhorario[16];
	uint8_t aux[16];
	char c,x1,x;
	uint8_t n1,cant=0;
     c5c:	61 2c       	mov	r6, r1
	while(1) {
		
			
		ds1307_getdate(&sem, &anio, &mes, &dia, &hora, &minuto, &segundo);
		
		sprintf(buf, "%3s  %d/%d/20%d %d:%d:%d",days[sem],dia, mes,  anio, hora, minuto, segundo);
     c5e:	0f 2e       	mov	r0, r31
     c60:	fc ea       	ldi	r31, 0xAC	; 172
     c62:	4f 2e       	mov	r4, r31
     c64:	f3 e0       	ldi	r31, 0x03	; 3
     c66:	5f 2e       	mov	r5, r31
     c68:	f0 2d       	mov	r31, r0
     c6a:	4e 01       	movw	r8, r28
     c6c:	f8 e2       	ldi	r31, 0x28	; 40
     c6e:	8f 0e       	add	r8, r31
     c70:	91 1c       	adc	r9, r1
		enviarCadena(buf);
		enviarCadena("\r\n");
		for (int i=0; i<cant; i++)
     c72:	71 2c       	mov	r7, r1
	}
	
	while(1) {
		
			
		ds1307_getdate(&sem, &anio, &mes, &dia, &hora, &minuto, &segundo);
     c74:	ce 01       	movw	r24, r28
     c76:	83 59       	subi	r24, 0x93	; 147
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	6c 01       	movw	r12, r24
     c7c:	de 01       	movw	r26, r28
     c7e:	a4 59       	subi	r26, 0x94	; 148
     c80:	bf 4f       	sbci	r27, 0xFF	; 255
     c82:	7d 01       	movw	r14, r26
     c84:	8e 01       	movw	r16, r28
     c86:	05 59       	subi	r16, 0x95	; 149
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	9e 01       	movw	r18, r28
     c8c:	26 59       	subi	r18, 0x96	; 150
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	ae 01       	movw	r20, r28
     c92:	47 59       	subi	r20, 0x97	; 151
     c94:	5f 4f       	sbci	r21, 0xFF	; 255
     c96:	be 01       	movw	r22, r28
     c98:	68 59       	subi	r22, 0x98	; 152
     c9a:	7f 4f       	sbci	r23, 0xFF	; 255
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	0e 94 38 02 	call	0x470	; 0x470 <ds1307_getdate>
		
		sprintf(buf, "%3s  %d/%d/20%d %d:%d:%d",days[sem],dia, mes,  anio, hora, minuto, segundo);
     ca2:	ae 96       	adiw	r28, 0x2e	; 46
     ca4:	8f ad       	ldd	r24, Y+63	; 0x3f
     ca6:	ae 97       	sbiw	r28, 0x2e	; 46
     ca8:	1f 92       	push	r1
     caa:	8f 93       	push	r24
     cac:	ad 96       	adiw	r28, 0x2d	; 45
     cae:	8f ad       	ldd	r24, Y+63	; 0x3f
     cb0:	ad 97       	sbiw	r28, 0x2d	; 45
     cb2:	1f 92       	push	r1
     cb4:	8f 93       	push	r24
     cb6:	ac 96       	adiw	r28, 0x2c	; 44
     cb8:	8f ad       	ldd	r24, Y+63	; 0x3f
     cba:	ac 97       	sbiw	r28, 0x2c	; 44
     cbc:	1f 92       	push	r1
     cbe:	8f 93       	push	r24
     cc0:	a9 96       	adiw	r28, 0x29	; 41
     cc2:	8f ad       	ldd	r24, Y+63	; 0x3f
     cc4:	a9 97       	sbiw	r28, 0x29	; 41
     cc6:	1f 92       	push	r1
     cc8:	8f 93       	push	r24
     cca:	aa 96       	adiw	r28, 0x2a	; 42
     ccc:	8f ad       	ldd	r24, Y+63	; 0x3f
     cce:	aa 97       	sbiw	r28, 0x2a	; 42
     cd0:	1f 92       	push	r1
     cd2:	8f 93       	push	r24
     cd4:	ab 96       	adiw	r28, 0x2b	; 43
     cd6:	8f ad       	ldd	r24, Y+63	; 0x3f
     cd8:	ab 97       	sbiw	r28, 0x2b	; 43
     cda:	1f 92       	push	r1
     cdc:	8f 93       	push	r24
     cde:	af 96       	adiw	r28, 0x2f	; 47
     ce0:	ef ad       	ldd	r30, Y+63	; 0x3f
     ce2:	af 97       	sbiw	r28, 0x2f	; 47
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	8a e5       	ldi	r24, 0x5A	; 90
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	8c 0f       	add	r24, r28
     cf0:	9d 1f       	adc	r25, r29
     cf2:	e8 0f       	add	r30, r24
     cf4:	f9 1f       	adc	r31, r25
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	8f 93       	push	r24
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 93       	push	r24
     cfe:	5f 92       	push	r5
     d00:	4f 92       	push	r4
     d02:	9f 92       	push	r9
     d04:	8f 92       	push	r8
     d06:	0e 94 51 07 	call	0xea2	; 0xea2 <sprintf>
		enviarCadena(buf);
     d0a:	c4 01       	movw	r24, r8
     d0c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		enviarCadena("\r\n");
     d10:	83 ee       	ldi	r24, 0xE3	; 227
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		for (int i=0; i<cant; i++)
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	16 14       	cp	r1, r6
     d24:	17 04       	cpc	r1, r7
     d26:	2c f5       	brge	.+74     	; 0xd72 <__stack+0x473>
     d28:	0a 54       	subi	r16, 0x4A	; 74
     d2a:	11 09       	sbc	r17, r1
     d2c:	78 01       	movw	r14, r16
     d2e:	e6 0c       	add	r14, r6
     d30:	f7 1c       	adc	r15, r7
		{
			if (diaAlarma[i]==sem)
     d32:	f8 01       	movw	r30, r16
     d34:	91 91       	ld	r25, Z+
     d36:	8f 01       	movw	r16, r30
     d38:	af 96       	adiw	r28, 0x2f	; 47
     d3a:	8f ad       	ldd	r24, Y+63	; 0x3f
     d3c:	af 97       	sbiw	r28, 0x2f	; 47
     d3e:	98 13       	cpse	r25, r24
     d40:	15 c0       	rjmp	.+42     	; 0xd6c <__stack+0x46d>
			{
				if ((hora>= horaAlarma1 && minuto>=minutoAlarma1) && ( hora <=horaAlarma2 && minuto <= minutoAlarma2))
     d42:	ac 96       	adiw	r28, 0x2c	; 44
     d44:	8f ad       	ldd	r24, Y+63	; 0x3f
     d46:	ac 97       	sbiw	r28, 0x2c	; 44
     d48:	8b 15       	cp	r24, r11
     d4a:	78 f0       	brcs	.+30     	; 0xd6a <__stack+0x46b>
     d4c:	ad 96       	adiw	r28, 0x2d	; 45
     d4e:	9f ad       	ldd	r25, Y+63	; 0x3f
     d50:	ad 97       	sbiw	r28, 0x2d	; 45
     d52:	9a 15       	cp	r25, r10
     d54:	50 f0       	brcs	.+20     	; 0xd6a <__stack+0x46b>
     d56:	38 16       	cp	r3, r24
     d58:	40 f0       	brcs	.+16     	; 0xd6a <__stack+0x46b>
     d5a:	29 16       	cp	r2, r25
     d5c:	30 f0       	brcs	.+12     	; 0xd6a <__stack+0x46b>
				{
					enviarCadena("\r\nRiego encendido\r\n");
     d5e:	85 ec       	ldi	r24, 0xC5	; 197
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
					PORTD |= (1<<PIND0);
     d66:	58 9a       	sbi	0x0b, 0	; 11
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <__stack+0x46d>
					
				}else{
					PORTD &=~(1<<PIND0);
     d6a:	58 98       	cbi	0x0b, 0	; 11
		ds1307_getdate(&sem, &anio, &mes, &dia, &hora, &minuto, &segundo);
		
		sprintf(buf, "%3s  %d/%d/20%d %d:%d:%d",days[sem],dia, mes,  anio, hora, minuto, segundo);
		enviarCadena(buf);
		enviarCadena("\r\n");
		for (int i=0; i<cant; i++)
     d6c:	e0 16       	cp	r14, r16
     d6e:	f1 06       	cpc	r15, r17
     d70:	01 f7       	brne	.-64     	; 0xd32 <__stack+0x433>
     d72:	ff ef       	ldi	r31, 0xFF	; 255
     d74:	23 ed       	ldi	r18, 0xD3	; 211
     d76:	80 e3       	ldi	r24, 0x30	; 48
     d78:	f1 50       	subi	r31, 0x01	; 1
     d7a:	20 40       	sbci	r18, 0x00	; 0
     d7c:	80 40       	sbci	r24, 0x00	; 0
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <__stack+0x479>
     d80:	00 c0       	rjmp	.+0      	; 0xd82 <__stack+0x483>
     d82:	00 00       	nop
				}
			}
		}
		
		_delay_ms(1000);
		LDR();		
     d84:	0e 94 11 03 	call	0x622	; 0x622 <LDR>
		if (bit_is_clear(PIND,PIND6)) // se apreto el boton?
     d88:	4e 99       	sbic	0x09, 6	; 9
     d8a:	2a c0       	rjmp	.+84     	; 0xde0 <__stack+0x4e1>
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	a9 ef       	ldi	r26, 0xF9	; 249
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	91 50       	subi	r25, 0x01	; 1
     d94:	a0 40       	sbci	r26, 0x00	; 0
     d96:	b0 40       	sbci	r27, 0x00	; 0
     d98:	e1 f7       	brne	.-8      	; 0xd92 <__stack+0x493>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <__stack+0x49d>
     d9c:	00 00       	nop
		{
			_delay_ms(20);
			
			if (bit_is_clear(PIND,PIND6)){
     d9e:	4e 99       	sbic	0x09, 6	; 9
     da0:	1f c0       	rjmp	.+62     	; 0xde0 <__stack+0x4e1>
				
				Puerta=1;
     da2:	e1 e0       	ldi	r30, 0x01	; 1
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	f0 93 51 04 	sts	0x0451, r31	; 0x800451 <__data_end+0x1>
     daa:	e0 93 50 04 	sts	0x0450, r30	; 0x800450 <__data_end>
				servo();
     dae:	0e 94 5e 03 	call	0x6bc	; 0x6bc <servo>
				if (NOCHE==1)
     db2:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <NOCHE>
     db6:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <NOCHE+0x1>
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	79 f4       	brne	.+30     	; 0xddc <__stack+0x4dd>
				{
					enviarCadena("Luz de garage apagada \n");
     dbe:	89 ed       	ldi	r24, 0xD9	; 217
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
					PORTD = (1<<PIND3);
     dc6:	f8 e0       	ldi	r31, 0x08	; 8
     dc8:	fb b9       	out	0x0b, r31	; 11
     dca:	2f ef       	ldi	r18, 0xFF	; 255
     dcc:	83 ed       	ldi	r24, 0xD3	; 211
     dce:	90 e3       	ldi	r25, 0x30	; 48
     dd0:	21 50       	subi	r18, 0x01	; 1
     dd2:	80 40       	sbci	r24, 0x00	; 0
     dd4:	90 40       	sbci	r25, 0x00	; 0
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <__stack+0x4d1>
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <__stack+0x4db>
     dda:	00 00       	nop
					_delay_ms(1000);
				}
				while(bit_is_clear(PIND,PIND6)); // espera a que el ususario deje de pulsar
     ddc:	4e 9b       	sbis	0x09, 6	; 9
     dde:	fe cf       	rjmp	.-4      	; 0xddc <__stack+0x4dd>
			}
		}
		 
		enviarCadena("-----------------------------------------");
     de0:	81 ef       	ldi	r24, 0xF1	; 241
     de2:	93 e0       	ldi	r25, 0x03	; 3
     de4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enviarCadena>
		//boton();
		

	}
     de8:	45 cf       	rjmp	.-374    	; 0xc74 <__stack+0x375>

00000dea <__udivmodqi4>:
     dea:	99 1b       	sub	r25, r25
     dec:	79 e0       	ldi	r23, 0x09	; 9
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__udivmodqi4_ep>

00000df0 <__udivmodqi4_loop>:
     df0:	99 1f       	adc	r25, r25
     df2:	96 17       	cp	r25, r22
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <__udivmodqi4_ep>
     df6:	96 1b       	sub	r25, r22

00000df8 <__udivmodqi4_ep>:
     df8:	88 1f       	adc	r24, r24
     dfa:	7a 95       	dec	r23
     dfc:	c9 f7       	brne	.-14     	; 0xdf0 <__udivmodqi4_loop>
     dfe:	80 95       	com	r24
     e00:	08 95       	ret

00000e02 <__divmodsi4>:
     e02:	05 2e       	mov	r0, r21
     e04:	97 fb       	bst	r25, 7
     e06:	1e f4       	brtc	.+6      	; 0xe0e <__divmodsi4+0xc>
     e08:	00 94       	com	r0
     e0a:	0e 94 18 07 	call	0xe30	; 0xe30 <__negsi2>
     e0e:	57 fd       	sbrc	r21, 7
     e10:	07 d0       	rcall	.+14     	; 0xe20 <__divmodsi4_neg2>
     e12:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__udivmodsi4>
     e16:	07 fc       	sbrc	r0, 7
     e18:	03 d0       	rcall	.+6      	; 0xe20 <__divmodsi4_neg2>
     e1a:	4e f4       	brtc	.+18     	; 0xe2e <__divmodsi4_exit>
     e1c:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__negsi2>

00000e20 <__divmodsi4_neg2>:
     e20:	50 95       	com	r21
     e22:	40 95       	com	r20
     e24:	30 95       	com	r19
     e26:	21 95       	neg	r18
     e28:	3f 4f       	sbci	r19, 0xFF	; 255
     e2a:	4f 4f       	sbci	r20, 0xFF	; 255
     e2c:	5f 4f       	sbci	r21, 0xFF	; 255

00000e2e <__divmodsi4_exit>:
     e2e:	08 95       	ret

00000e30 <__negsi2>:
     e30:	90 95       	com	r25
     e32:	80 95       	com	r24
     e34:	70 95       	com	r23
     e36:	61 95       	neg	r22
     e38:	7f 4f       	sbci	r23, 0xFF	; 255
     e3a:	8f 4f       	sbci	r24, 0xFF	; 255
     e3c:	9f 4f       	sbci	r25, 0xFF	; 255
     e3e:	08 95       	ret

00000e40 <__umulhisi3>:
     e40:	a2 9f       	mul	r26, r18
     e42:	b0 01       	movw	r22, r0
     e44:	b3 9f       	mul	r27, r19
     e46:	c0 01       	movw	r24, r0
     e48:	a3 9f       	mul	r26, r19
     e4a:	70 0d       	add	r23, r0
     e4c:	81 1d       	adc	r24, r1
     e4e:	11 24       	eor	r1, r1
     e50:	91 1d       	adc	r25, r1
     e52:	b2 9f       	mul	r27, r18
     e54:	70 0d       	add	r23, r0
     e56:	81 1d       	adc	r24, r1
     e58:	11 24       	eor	r1, r1
     e5a:	91 1d       	adc	r25, r1
     e5c:	08 95       	ret

00000e5e <__udivmodsi4>:
     e5e:	a1 e2       	ldi	r26, 0x21	; 33
     e60:	1a 2e       	mov	r1, r26
     e62:	aa 1b       	sub	r26, r26
     e64:	bb 1b       	sub	r27, r27
     e66:	fd 01       	movw	r30, r26
     e68:	0d c0       	rjmp	.+26     	; 0xe84 <__udivmodsi4_ep>

00000e6a <__udivmodsi4_loop>:
     e6a:	aa 1f       	adc	r26, r26
     e6c:	bb 1f       	adc	r27, r27
     e6e:	ee 1f       	adc	r30, r30
     e70:	ff 1f       	adc	r31, r31
     e72:	a2 17       	cp	r26, r18
     e74:	b3 07       	cpc	r27, r19
     e76:	e4 07       	cpc	r30, r20
     e78:	f5 07       	cpc	r31, r21
     e7a:	20 f0       	brcs	.+8      	; 0xe84 <__udivmodsi4_ep>
     e7c:	a2 1b       	sub	r26, r18
     e7e:	b3 0b       	sbc	r27, r19
     e80:	e4 0b       	sbc	r30, r20
     e82:	f5 0b       	sbc	r31, r21

00000e84 <__udivmodsi4_ep>:
     e84:	66 1f       	adc	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	88 1f       	adc	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	1a 94       	dec	r1
     e8e:	69 f7       	brne	.-38     	; 0xe6a <__udivmodsi4_loop>
     e90:	60 95       	com	r22
     e92:	70 95       	com	r23
     e94:	80 95       	com	r24
     e96:	90 95       	com	r25
     e98:	9b 01       	movw	r18, r22
     e9a:	ac 01       	movw	r20, r24
     e9c:	bd 01       	movw	r22, r26
     e9e:	cf 01       	movw	r24, r30
     ea0:	08 95       	ret

00000ea2 <sprintf>:
     ea2:	ae e0       	ldi	r26, 0x0E	; 14
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e7 e5       	ldi	r30, 0x57	; 87
     ea8:	f7 e0       	ldi	r31, 0x07	; 7
     eaa:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__prologue_saves__+0x1c>
     eae:	0d 89       	ldd	r16, Y+21	; 0x15
     eb0:	1e 89       	ldd	r17, Y+22	; 0x16
     eb2:	86 e0       	ldi	r24, 0x06	; 6
     eb4:	8c 83       	std	Y+4, r24	; 0x04
     eb6:	1a 83       	std	Y+2, r17	; 0x02
     eb8:	09 83       	std	Y+1, r16	; 0x01
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	9f e7       	ldi	r25, 0x7F	; 127
     ebe:	9e 83       	std	Y+6, r25	; 0x06
     ec0:	8d 83       	std	Y+5, r24	; 0x05
     ec2:	ae 01       	movw	r20, r28
     ec4:	47 5e       	subi	r20, 0xE7	; 231
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	6f 89       	ldd	r22, Y+23	; 0x17
     eca:	78 8d       	ldd	r23, Y+24	; 0x18
     ecc:	ce 01       	movw	r24, r28
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	0e 94 73 07 	call	0xee6	; 0xee6 <vfprintf>
     ed4:	ef 81       	ldd	r30, Y+7	; 0x07
     ed6:	f8 85       	ldd	r31, Y+8	; 0x08
     ed8:	e0 0f       	add	r30, r16
     eda:	f1 1f       	adc	r31, r17
     edc:	10 82       	st	Z, r1
     ede:	2e 96       	adiw	r28, 0x0e	; 14
     ee0:	e4 e0       	ldi	r30, 0x04	; 4
     ee2:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__epilogue_restores__+0x1c>

00000ee6 <vfprintf>:
     ee6:	ab e0       	ldi	r26, 0x0B	; 11
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e9 e7       	ldi	r30, 0x79	; 121
     eec:	f7 e0       	ldi	r31, 0x07	; 7
     eee:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__prologue_saves__>
     ef2:	6c 01       	movw	r12, r24
     ef4:	7b 01       	movw	r14, r22
     ef6:	8a 01       	movw	r16, r20
     ef8:	fc 01       	movw	r30, r24
     efa:	17 82       	std	Z+7, r1	; 0x07
     efc:	16 82       	std	Z+6, r1	; 0x06
     efe:	83 81       	ldd	r24, Z+3	; 0x03
     f00:	81 ff       	sbrs	r24, 1
     f02:	cc c1       	rjmp	.+920    	; 0x129c <vfprintf+0x3b6>
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	3c 01       	movw	r6, r24
     f0a:	f6 01       	movw	r30, r12
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	f7 01       	movw	r30, r14
     f10:	93 fd       	sbrc	r25, 3
     f12:	85 91       	lpm	r24, Z+
     f14:	93 ff       	sbrs	r25, 3
     f16:	81 91       	ld	r24, Z+
     f18:	7f 01       	movw	r14, r30
     f1a:	88 23       	and	r24, r24
     f1c:	09 f4       	brne	.+2      	; 0xf20 <vfprintf+0x3a>
     f1e:	ba c1       	rjmp	.+884    	; 0x1294 <vfprintf+0x3ae>
     f20:	85 32       	cpi	r24, 0x25	; 37
     f22:	39 f4       	brne	.+14     	; 0xf32 <vfprintf+0x4c>
     f24:	93 fd       	sbrc	r25, 3
     f26:	85 91       	lpm	r24, Z+
     f28:	93 ff       	sbrs	r25, 3
     f2a:	81 91       	ld	r24, Z+
     f2c:	7f 01       	movw	r14, r30
     f2e:	85 32       	cpi	r24, 0x25	; 37
     f30:	29 f4       	brne	.+10     	; 0xf3c <vfprintf+0x56>
     f32:	b6 01       	movw	r22, r12
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fputc>
     f3a:	e7 cf       	rjmp	.-50     	; 0xf0a <vfprintf+0x24>
     f3c:	91 2c       	mov	r9, r1
     f3e:	21 2c       	mov	r2, r1
     f40:	31 2c       	mov	r3, r1
     f42:	ff e1       	ldi	r31, 0x1F	; 31
     f44:	f3 15       	cp	r31, r3
     f46:	d8 f0       	brcs	.+54     	; 0xf7e <vfprintf+0x98>
     f48:	8b 32       	cpi	r24, 0x2B	; 43
     f4a:	79 f0       	breq	.+30     	; 0xf6a <vfprintf+0x84>
     f4c:	38 f4       	brcc	.+14     	; 0xf5c <vfprintf+0x76>
     f4e:	80 32       	cpi	r24, 0x20	; 32
     f50:	79 f0       	breq	.+30     	; 0xf70 <vfprintf+0x8a>
     f52:	83 32       	cpi	r24, 0x23	; 35
     f54:	a1 f4       	brne	.+40     	; 0xf7e <vfprintf+0x98>
     f56:	23 2d       	mov	r18, r3
     f58:	20 61       	ori	r18, 0x10	; 16
     f5a:	1d c0       	rjmp	.+58     	; 0xf96 <vfprintf+0xb0>
     f5c:	8d 32       	cpi	r24, 0x2D	; 45
     f5e:	61 f0       	breq	.+24     	; 0xf78 <vfprintf+0x92>
     f60:	80 33       	cpi	r24, 0x30	; 48
     f62:	69 f4       	brne	.+26     	; 0xf7e <vfprintf+0x98>
     f64:	23 2d       	mov	r18, r3
     f66:	21 60       	ori	r18, 0x01	; 1
     f68:	16 c0       	rjmp	.+44     	; 0xf96 <vfprintf+0xb0>
     f6a:	83 2d       	mov	r24, r3
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	38 2e       	mov	r3, r24
     f70:	e3 2d       	mov	r30, r3
     f72:	e4 60       	ori	r30, 0x04	; 4
     f74:	3e 2e       	mov	r3, r30
     f76:	2a c0       	rjmp	.+84     	; 0xfcc <vfprintf+0xe6>
     f78:	f3 2d       	mov	r31, r3
     f7a:	f8 60       	ori	r31, 0x08	; 8
     f7c:	1d c0       	rjmp	.+58     	; 0xfb8 <vfprintf+0xd2>
     f7e:	37 fc       	sbrc	r3, 7
     f80:	2d c0       	rjmp	.+90     	; 0xfdc <vfprintf+0xf6>
     f82:	20 ed       	ldi	r18, 0xD0	; 208
     f84:	28 0f       	add	r18, r24
     f86:	2a 30       	cpi	r18, 0x0A	; 10
     f88:	40 f0       	brcs	.+16     	; 0xf9a <vfprintf+0xb4>
     f8a:	8e 32       	cpi	r24, 0x2E	; 46
     f8c:	b9 f4       	brne	.+46     	; 0xfbc <vfprintf+0xd6>
     f8e:	36 fc       	sbrc	r3, 6
     f90:	81 c1       	rjmp	.+770    	; 0x1294 <vfprintf+0x3ae>
     f92:	23 2d       	mov	r18, r3
     f94:	20 64       	ori	r18, 0x40	; 64
     f96:	32 2e       	mov	r3, r18
     f98:	19 c0       	rjmp	.+50     	; 0xfcc <vfprintf+0xe6>
     f9a:	36 fe       	sbrs	r3, 6
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <vfprintf+0xc4>
     f9e:	8a e0       	ldi	r24, 0x0A	; 10
     fa0:	98 9e       	mul	r9, r24
     fa2:	20 0d       	add	r18, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	92 2e       	mov	r9, r18
     fa8:	11 c0       	rjmp	.+34     	; 0xfcc <vfprintf+0xe6>
     faa:	ea e0       	ldi	r30, 0x0A	; 10
     fac:	2e 9e       	mul	r2, r30
     fae:	20 0d       	add	r18, r0
     fb0:	11 24       	eor	r1, r1
     fb2:	22 2e       	mov	r2, r18
     fb4:	f3 2d       	mov	r31, r3
     fb6:	f0 62       	ori	r31, 0x20	; 32
     fb8:	3f 2e       	mov	r3, r31
     fba:	08 c0       	rjmp	.+16     	; 0xfcc <vfprintf+0xe6>
     fbc:	8c 36       	cpi	r24, 0x6C	; 108
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <vfprintf+0xe2>
     fc0:	83 2d       	mov	r24, r3
     fc2:	80 68       	ori	r24, 0x80	; 128
     fc4:	38 2e       	mov	r3, r24
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <vfprintf+0xe6>
     fc8:	88 36       	cpi	r24, 0x68	; 104
     fca:	41 f4       	brne	.+16     	; 0xfdc <vfprintf+0xf6>
     fcc:	f7 01       	movw	r30, r14
     fce:	93 fd       	sbrc	r25, 3
     fd0:	85 91       	lpm	r24, Z+
     fd2:	93 ff       	sbrs	r25, 3
     fd4:	81 91       	ld	r24, Z+
     fd6:	7f 01       	movw	r14, r30
     fd8:	81 11       	cpse	r24, r1
     fda:	b3 cf       	rjmp	.-154    	; 0xf42 <vfprintf+0x5c>
     fdc:	98 2f       	mov	r25, r24
     fde:	9f 7d       	andi	r25, 0xDF	; 223
     fe0:	95 54       	subi	r25, 0x45	; 69
     fe2:	93 30       	cpi	r25, 0x03	; 3
     fe4:	28 f4       	brcc	.+10     	; 0xff0 <vfprintf+0x10a>
     fe6:	0c 5f       	subi	r16, 0xFC	; 252
     fe8:	1f 4f       	sbci	r17, 0xFF	; 255
     fea:	9f e3       	ldi	r25, 0x3F	; 63
     fec:	99 83       	std	Y+1, r25	; 0x01
     fee:	0d c0       	rjmp	.+26     	; 0x100a <vfprintf+0x124>
     ff0:	83 36       	cpi	r24, 0x63	; 99
     ff2:	31 f0       	breq	.+12     	; 0x1000 <vfprintf+0x11a>
     ff4:	83 37       	cpi	r24, 0x73	; 115
     ff6:	71 f0       	breq	.+28     	; 0x1014 <vfprintf+0x12e>
     ff8:	83 35       	cpi	r24, 0x53	; 83
     ffa:	09 f0       	breq	.+2      	; 0xffe <vfprintf+0x118>
     ffc:	59 c0       	rjmp	.+178    	; 0x10b0 <vfprintf+0x1ca>
     ffe:	21 c0       	rjmp	.+66     	; 0x1042 <vfprintf+0x15c>
    1000:	f8 01       	movw	r30, r16
    1002:	80 81       	ld	r24, Z
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	0e 5f       	subi	r16, 0xFE	; 254
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	88 24       	eor	r8, r8
    100c:	83 94       	inc	r8
    100e:	91 2c       	mov	r9, r1
    1010:	53 01       	movw	r10, r6
    1012:	13 c0       	rjmp	.+38     	; 0x103a <vfprintf+0x154>
    1014:	28 01       	movw	r4, r16
    1016:	f2 e0       	ldi	r31, 0x02	; 2
    1018:	4f 0e       	add	r4, r31
    101a:	51 1c       	adc	r5, r1
    101c:	f8 01       	movw	r30, r16
    101e:	a0 80       	ld	r10, Z
    1020:	b1 80       	ldd	r11, Z+1	; 0x01
    1022:	36 fe       	sbrs	r3, 6
    1024:	03 c0       	rjmp	.+6      	; 0x102c <vfprintf+0x146>
    1026:	69 2d       	mov	r22, r9
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <vfprintf+0x14a>
    102c:	6f ef       	ldi	r22, 0xFF	; 255
    102e:	7f ef       	ldi	r23, 0xFF	; 255
    1030:	c5 01       	movw	r24, r10
    1032:	0e 94 5f 09 	call	0x12be	; 0x12be <strnlen>
    1036:	4c 01       	movw	r8, r24
    1038:	82 01       	movw	r16, r4
    103a:	f3 2d       	mov	r31, r3
    103c:	ff 77       	andi	r31, 0x7F	; 127
    103e:	3f 2e       	mov	r3, r31
    1040:	16 c0       	rjmp	.+44     	; 0x106e <vfprintf+0x188>
    1042:	28 01       	movw	r4, r16
    1044:	22 e0       	ldi	r18, 0x02	; 2
    1046:	42 0e       	add	r4, r18
    1048:	51 1c       	adc	r5, r1
    104a:	f8 01       	movw	r30, r16
    104c:	a0 80       	ld	r10, Z
    104e:	b1 80       	ldd	r11, Z+1	; 0x01
    1050:	36 fe       	sbrs	r3, 6
    1052:	03 c0       	rjmp	.+6      	; 0x105a <vfprintf+0x174>
    1054:	69 2d       	mov	r22, r9
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <vfprintf+0x178>
    105a:	6f ef       	ldi	r22, 0xFF	; 255
    105c:	7f ef       	ldi	r23, 0xFF	; 255
    105e:	c5 01       	movw	r24, r10
    1060:	0e 94 54 09 	call	0x12a8	; 0x12a8 <strnlen_P>
    1064:	4c 01       	movw	r8, r24
    1066:	f3 2d       	mov	r31, r3
    1068:	f0 68       	ori	r31, 0x80	; 128
    106a:	3f 2e       	mov	r3, r31
    106c:	82 01       	movw	r16, r4
    106e:	33 fc       	sbrc	r3, 3
    1070:	1b c0       	rjmp	.+54     	; 0x10a8 <vfprintf+0x1c2>
    1072:	82 2d       	mov	r24, r2
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	88 16       	cp	r8, r24
    1078:	99 06       	cpc	r9, r25
    107a:	b0 f4       	brcc	.+44     	; 0x10a8 <vfprintf+0x1c2>
    107c:	b6 01       	movw	r22, r12
    107e:	80 e2       	ldi	r24, 0x20	; 32
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fputc>
    1086:	2a 94       	dec	r2
    1088:	f4 cf       	rjmp	.-24     	; 0x1072 <vfprintf+0x18c>
    108a:	f5 01       	movw	r30, r10
    108c:	37 fc       	sbrc	r3, 7
    108e:	85 91       	lpm	r24, Z+
    1090:	37 fe       	sbrs	r3, 7
    1092:	81 91       	ld	r24, Z+
    1094:	5f 01       	movw	r10, r30
    1096:	b6 01       	movw	r22, r12
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fputc>
    109e:	21 10       	cpse	r2, r1
    10a0:	2a 94       	dec	r2
    10a2:	21 e0       	ldi	r18, 0x01	; 1
    10a4:	82 1a       	sub	r8, r18
    10a6:	91 08       	sbc	r9, r1
    10a8:	81 14       	cp	r8, r1
    10aa:	91 04       	cpc	r9, r1
    10ac:	71 f7       	brne	.-36     	; 0x108a <vfprintf+0x1a4>
    10ae:	e8 c0       	rjmp	.+464    	; 0x1280 <vfprintf+0x39a>
    10b0:	84 36       	cpi	r24, 0x64	; 100
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <vfprintf+0x1d2>
    10b4:	89 36       	cpi	r24, 0x69	; 105
    10b6:	41 f5       	brne	.+80     	; 0x1108 <vfprintf+0x222>
    10b8:	f8 01       	movw	r30, r16
    10ba:	37 fe       	sbrs	r3, 7
    10bc:	07 c0       	rjmp	.+14     	; 0x10cc <vfprintf+0x1e6>
    10be:	60 81       	ld	r22, Z
    10c0:	71 81       	ldd	r23, Z+1	; 0x01
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	0c 5f       	subi	r16, 0xFC	; 252
    10c8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ca:	08 c0       	rjmp	.+16     	; 0x10dc <vfprintf+0x1f6>
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	07 2e       	mov	r0, r23
    10d2:	00 0c       	add	r0, r0
    10d4:	88 0b       	sbc	r24, r24
    10d6:	99 0b       	sbc	r25, r25
    10d8:	0e 5f       	subi	r16, 0xFE	; 254
    10da:	1f 4f       	sbci	r17, 0xFF	; 255
    10dc:	f3 2d       	mov	r31, r3
    10de:	ff 76       	andi	r31, 0x6F	; 111
    10e0:	3f 2e       	mov	r3, r31
    10e2:	97 ff       	sbrs	r25, 7
    10e4:	09 c0       	rjmp	.+18     	; 0x10f8 <vfprintf+0x212>
    10e6:	90 95       	com	r25
    10e8:	80 95       	com	r24
    10ea:	70 95       	com	r23
    10ec:	61 95       	neg	r22
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	8f 4f       	sbci	r24, 0xFF	; 255
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	f0 68       	ori	r31, 0x80	; 128
    10f6:	3f 2e       	mov	r3, r31
    10f8:	2a e0       	ldi	r18, 0x0A	; 10
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	a3 01       	movw	r20, r6
    10fe:	0e 94 a6 09 	call	0x134c	; 0x134c <__ultoa_invert>
    1102:	88 2e       	mov	r8, r24
    1104:	86 18       	sub	r8, r6
    1106:	45 c0       	rjmp	.+138    	; 0x1192 <vfprintf+0x2ac>
    1108:	85 37       	cpi	r24, 0x75	; 117
    110a:	31 f4       	brne	.+12     	; 0x1118 <vfprintf+0x232>
    110c:	23 2d       	mov	r18, r3
    110e:	2f 7e       	andi	r18, 0xEF	; 239
    1110:	b2 2e       	mov	r11, r18
    1112:	2a e0       	ldi	r18, 0x0A	; 10
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	25 c0       	rjmp	.+74     	; 0x1162 <vfprintf+0x27c>
    1118:	93 2d       	mov	r25, r3
    111a:	99 7f       	andi	r25, 0xF9	; 249
    111c:	b9 2e       	mov	r11, r25
    111e:	8f 36       	cpi	r24, 0x6F	; 111
    1120:	c1 f0       	breq	.+48     	; 0x1152 <vfprintf+0x26c>
    1122:	18 f4       	brcc	.+6      	; 0x112a <vfprintf+0x244>
    1124:	88 35       	cpi	r24, 0x58	; 88
    1126:	79 f0       	breq	.+30     	; 0x1146 <vfprintf+0x260>
    1128:	b5 c0       	rjmp	.+362    	; 0x1294 <vfprintf+0x3ae>
    112a:	80 37       	cpi	r24, 0x70	; 112
    112c:	19 f0       	breq	.+6      	; 0x1134 <vfprintf+0x24e>
    112e:	88 37       	cpi	r24, 0x78	; 120
    1130:	21 f0       	breq	.+8      	; 0x113a <vfprintf+0x254>
    1132:	b0 c0       	rjmp	.+352    	; 0x1294 <vfprintf+0x3ae>
    1134:	e9 2f       	mov	r30, r25
    1136:	e0 61       	ori	r30, 0x10	; 16
    1138:	be 2e       	mov	r11, r30
    113a:	b4 fe       	sbrs	r11, 4
    113c:	0d c0       	rjmp	.+26     	; 0x1158 <vfprintf+0x272>
    113e:	fb 2d       	mov	r31, r11
    1140:	f4 60       	ori	r31, 0x04	; 4
    1142:	bf 2e       	mov	r11, r31
    1144:	09 c0       	rjmp	.+18     	; 0x1158 <vfprintf+0x272>
    1146:	34 fe       	sbrs	r3, 4
    1148:	0a c0       	rjmp	.+20     	; 0x115e <vfprintf+0x278>
    114a:	29 2f       	mov	r18, r25
    114c:	26 60       	ori	r18, 0x06	; 6
    114e:	b2 2e       	mov	r11, r18
    1150:	06 c0       	rjmp	.+12     	; 0x115e <vfprintf+0x278>
    1152:	28 e0       	ldi	r18, 0x08	; 8
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <vfprintf+0x27c>
    1158:	20 e1       	ldi	r18, 0x10	; 16
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <vfprintf+0x27c>
    115e:	20 e1       	ldi	r18, 0x10	; 16
    1160:	32 e0       	ldi	r19, 0x02	; 2
    1162:	f8 01       	movw	r30, r16
    1164:	b7 fe       	sbrs	r11, 7
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <vfprintf+0x290>
    1168:	60 81       	ld	r22, Z
    116a:	71 81       	ldd	r23, Z+1	; 0x01
    116c:	82 81       	ldd	r24, Z+2	; 0x02
    116e:	93 81       	ldd	r25, Z+3	; 0x03
    1170:	0c 5f       	subi	r16, 0xFC	; 252
    1172:	1f 4f       	sbci	r17, 0xFF	; 255
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <vfprintf+0x29c>
    1176:	60 81       	ld	r22, Z
    1178:	71 81       	ldd	r23, Z+1	; 0x01
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 5f       	subi	r16, 0xFE	; 254
    1180:	1f 4f       	sbci	r17, 0xFF	; 255
    1182:	a3 01       	movw	r20, r6
    1184:	0e 94 a6 09 	call	0x134c	; 0x134c <__ultoa_invert>
    1188:	88 2e       	mov	r8, r24
    118a:	86 18       	sub	r8, r6
    118c:	fb 2d       	mov	r31, r11
    118e:	ff 77       	andi	r31, 0x7F	; 127
    1190:	3f 2e       	mov	r3, r31
    1192:	36 fe       	sbrs	r3, 6
    1194:	0d c0       	rjmp	.+26     	; 0x11b0 <vfprintf+0x2ca>
    1196:	23 2d       	mov	r18, r3
    1198:	2e 7f       	andi	r18, 0xFE	; 254
    119a:	a2 2e       	mov	r10, r18
    119c:	89 14       	cp	r8, r9
    119e:	58 f4       	brcc	.+22     	; 0x11b6 <vfprintf+0x2d0>
    11a0:	34 fe       	sbrs	r3, 4
    11a2:	0b c0       	rjmp	.+22     	; 0x11ba <vfprintf+0x2d4>
    11a4:	32 fc       	sbrc	r3, 2
    11a6:	09 c0       	rjmp	.+18     	; 0x11ba <vfprintf+0x2d4>
    11a8:	83 2d       	mov	r24, r3
    11aa:	8e 7e       	andi	r24, 0xEE	; 238
    11ac:	a8 2e       	mov	r10, r24
    11ae:	05 c0       	rjmp	.+10     	; 0x11ba <vfprintf+0x2d4>
    11b0:	b8 2c       	mov	r11, r8
    11b2:	a3 2c       	mov	r10, r3
    11b4:	03 c0       	rjmp	.+6      	; 0x11bc <vfprintf+0x2d6>
    11b6:	b8 2c       	mov	r11, r8
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <vfprintf+0x2d6>
    11ba:	b9 2c       	mov	r11, r9
    11bc:	a4 fe       	sbrs	r10, 4
    11be:	0f c0       	rjmp	.+30     	; 0x11de <vfprintf+0x2f8>
    11c0:	fe 01       	movw	r30, r28
    11c2:	e8 0d       	add	r30, r8
    11c4:	f1 1d       	adc	r31, r1
    11c6:	80 81       	ld	r24, Z
    11c8:	80 33       	cpi	r24, 0x30	; 48
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <vfprintf+0x2ee>
    11cc:	9a 2d       	mov	r25, r10
    11ce:	99 7e       	andi	r25, 0xE9	; 233
    11d0:	a9 2e       	mov	r10, r25
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <vfprintf+0x300>
    11d4:	a2 fe       	sbrs	r10, 2
    11d6:	06 c0       	rjmp	.+12     	; 0x11e4 <vfprintf+0x2fe>
    11d8:	b3 94       	inc	r11
    11da:	b3 94       	inc	r11
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <vfprintf+0x300>
    11de:	8a 2d       	mov	r24, r10
    11e0:	86 78       	andi	r24, 0x86	; 134
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <vfprintf+0x300>
    11e4:	b3 94       	inc	r11
    11e6:	a3 fc       	sbrc	r10, 3
    11e8:	11 c0       	rjmp	.+34     	; 0x120c <vfprintf+0x326>
    11ea:	a0 fe       	sbrs	r10, 0
    11ec:	06 c0       	rjmp	.+12     	; 0x11fa <vfprintf+0x314>
    11ee:	b2 14       	cp	r11, r2
    11f0:	88 f4       	brcc	.+34     	; 0x1214 <vfprintf+0x32e>
    11f2:	28 0c       	add	r2, r8
    11f4:	92 2c       	mov	r9, r2
    11f6:	9b 18       	sub	r9, r11
    11f8:	0e c0       	rjmp	.+28     	; 0x1216 <vfprintf+0x330>
    11fa:	b2 14       	cp	r11, r2
    11fc:	60 f4       	brcc	.+24     	; 0x1216 <vfprintf+0x330>
    11fe:	b6 01       	movw	r22, r12
    1200:	80 e2       	ldi	r24, 0x20	; 32
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fputc>
    1208:	b3 94       	inc	r11
    120a:	f7 cf       	rjmp	.-18     	; 0x11fa <vfprintf+0x314>
    120c:	b2 14       	cp	r11, r2
    120e:	18 f4       	brcc	.+6      	; 0x1216 <vfprintf+0x330>
    1210:	2b 18       	sub	r2, r11
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <vfprintf+0x332>
    1214:	98 2c       	mov	r9, r8
    1216:	21 2c       	mov	r2, r1
    1218:	a4 fe       	sbrs	r10, 4
    121a:	10 c0       	rjmp	.+32     	; 0x123c <vfprintf+0x356>
    121c:	b6 01       	movw	r22, r12
    121e:	80 e3       	ldi	r24, 0x30	; 48
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fputc>
    1226:	a2 fe       	sbrs	r10, 2
    1228:	17 c0       	rjmp	.+46     	; 0x1258 <vfprintf+0x372>
    122a:	a1 fc       	sbrc	r10, 1
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <vfprintf+0x34e>
    122e:	88 e7       	ldi	r24, 0x78	; 120
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <vfprintf+0x352>
    1234:	88 e5       	ldi	r24, 0x58	; 88
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	b6 01       	movw	r22, r12
    123a:	0c c0       	rjmp	.+24     	; 0x1254 <vfprintf+0x36e>
    123c:	8a 2d       	mov	r24, r10
    123e:	86 78       	andi	r24, 0x86	; 134
    1240:	59 f0       	breq	.+22     	; 0x1258 <vfprintf+0x372>
    1242:	a1 fe       	sbrs	r10, 1
    1244:	02 c0       	rjmp	.+4      	; 0x124a <vfprintf+0x364>
    1246:	8b e2       	ldi	r24, 0x2B	; 43
    1248:	01 c0       	rjmp	.+2      	; 0x124c <vfprintf+0x366>
    124a:	80 e2       	ldi	r24, 0x20	; 32
    124c:	a7 fc       	sbrc	r10, 7
    124e:	8d e2       	ldi	r24, 0x2D	; 45
    1250:	b6 01       	movw	r22, r12
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fputc>
    1258:	89 14       	cp	r8, r9
    125a:	38 f4       	brcc	.+14     	; 0x126a <vfprintf+0x384>
    125c:	b6 01       	movw	r22, r12
    125e:	80 e3       	ldi	r24, 0x30	; 48
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fputc>
    1266:	9a 94       	dec	r9
    1268:	f7 cf       	rjmp	.-18     	; 0x1258 <vfprintf+0x372>
    126a:	8a 94       	dec	r8
    126c:	f3 01       	movw	r30, r6
    126e:	e8 0d       	add	r30, r8
    1270:	f1 1d       	adc	r31, r1
    1272:	80 81       	ld	r24, Z
    1274:	b6 01       	movw	r22, r12
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fputc>
    127c:	81 10       	cpse	r8, r1
    127e:	f5 cf       	rjmp	.-22     	; 0x126a <vfprintf+0x384>
    1280:	22 20       	and	r2, r2
    1282:	09 f4       	brne	.+2      	; 0x1286 <vfprintf+0x3a0>
    1284:	42 ce       	rjmp	.-892    	; 0xf0a <vfprintf+0x24>
    1286:	b6 01       	movw	r22, r12
    1288:	80 e2       	ldi	r24, 0x20	; 32
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <fputc>
    1290:	2a 94       	dec	r2
    1292:	f6 cf       	rjmp	.-20     	; 0x1280 <vfprintf+0x39a>
    1294:	f6 01       	movw	r30, r12
    1296:	86 81       	ldd	r24, Z+6	; 0x06
    1298:	97 81       	ldd	r25, Z+7	; 0x07
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <vfprintf+0x3ba>
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	9f ef       	ldi	r25, 0xFF	; 255
    12a0:	2b 96       	adiw	r28, 0x0b	; 11
    12a2:	e2 e1       	ldi	r30, 0x12	; 18
    12a4:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__epilogue_restores__>

000012a8 <strnlen_P>:
    12a8:	fc 01       	movw	r30, r24
    12aa:	05 90       	lpm	r0, Z+
    12ac:	61 50       	subi	r22, 0x01	; 1
    12ae:	70 40       	sbci	r23, 0x00	; 0
    12b0:	01 10       	cpse	r0, r1
    12b2:	d8 f7       	brcc	.-10     	; 0x12aa <strnlen_P+0x2>
    12b4:	80 95       	com	r24
    12b6:	90 95       	com	r25
    12b8:	8e 0f       	add	r24, r30
    12ba:	9f 1f       	adc	r25, r31
    12bc:	08 95       	ret

000012be <strnlen>:
    12be:	fc 01       	movw	r30, r24
    12c0:	61 50       	subi	r22, 0x01	; 1
    12c2:	70 40       	sbci	r23, 0x00	; 0
    12c4:	01 90       	ld	r0, Z+
    12c6:	01 10       	cpse	r0, r1
    12c8:	d8 f7       	brcc	.-10     	; 0x12c0 <strnlen+0x2>
    12ca:	80 95       	com	r24
    12cc:	90 95       	com	r25
    12ce:	8e 0f       	add	r24, r30
    12d0:	9f 1f       	adc	r25, r31
    12d2:	08 95       	ret

000012d4 <fputc>:
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	fb 01       	movw	r30, r22
    12de:	23 81       	ldd	r18, Z+3	; 0x03
    12e0:	21 fd       	sbrc	r18, 1
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <fputc+0x16>
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	9f ef       	ldi	r25, 0xFF	; 255
    12e8:	2c c0       	rjmp	.+88     	; 0x1342 <fputc+0x6e>
    12ea:	22 ff       	sbrs	r18, 2
    12ec:	16 c0       	rjmp	.+44     	; 0x131a <fputc+0x46>
    12ee:	46 81       	ldd	r20, Z+6	; 0x06
    12f0:	57 81       	ldd	r21, Z+7	; 0x07
    12f2:	24 81       	ldd	r18, Z+4	; 0x04
    12f4:	35 81       	ldd	r19, Z+5	; 0x05
    12f6:	42 17       	cp	r20, r18
    12f8:	53 07       	cpc	r21, r19
    12fa:	44 f4       	brge	.+16     	; 0x130c <fputc+0x38>
    12fc:	a0 81       	ld	r26, Z
    12fe:	b1 81       	ldd	r27, Z+1	; 0x01
    1300:	9d 01       	movw	r18, r26
    1302:	2f 5f       	subi	r18, 0xFF	; 255
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	31 83       	std	Z+1, r19	; 0x01
    1308:	20 83       	st	Z, r18
    130a:	8c 93       	st	X, r24
    130c:	26 81       	ldd	r18, Z+6	; 0x06
    130e:	37 81       	ldd	r19, Z+7	; 0x07
    1310:	2f 5f       	subi	r18, 0xFF	; 255
    1312:	3f 4f       	sbci	r19, 0xFF	; 255
    1314:	37 83       	std	Z+7, r19	; 0x07
    1316:	26 83       	std	Z+6, r18	; 0x06
    1318:	14 c0       	rjmp	.+40     	; 0x1342 <fputc+0x6e>
    131a:	8b 01       	movw	r16, r22
    131c:	ec 01       	movw	r28, r24
    131e:	fb 01       	movw	r30, r22
    1320:	00 84       	ldd	r0, Z+8	; 0x08
    1322:	f1 85       	ldd	r31, Z+9	; 0x09
    1324:	e0 2d       	mov	r30, r0
    1326:	09 95       	icall
    1328:	89 2b       	or	r24, r25
    132a:	e1 f6       	brne	.-72     	; 0x12e4 <fputc+0x10>
    132c:	d8 01       	movw	r26, r16
    132e:	16 96       	adiw	r26, 0x06	; 6
    1330:	8d 91       	ld	r24, X+
    1332:	9c 91       	ld	r25, X
    1334:	17 97       	sbiw	r26, 0x07	; 7
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	17 96       	adiw	r26, 0x07	; 7
    133a:	9c 93       	st	X, r25
    133c:	8e 93       	st	-X, r24
    133e:	16 97       	sbiw	r26, 0x06	; 6
    1340:	ce 01       	movw	r24, r28
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret

0000134c <__ultoa_invert>:
    134c:	fa 01       	movw	r30, r20
    134e:	aa 27       	eor	r26, r26
    1350:	28 30       	cpi	r18, 0x08	; 8
    1352:	51 f1       	breq	.+84     	; 0x13a8 <__ultoa_invert+0x5c>
    1354:	20 31       	cpi	r18, 0x10	; 16
    1356:	81 f1       	breq	.+96     	; 0x13b8 <__ultoa_invert+0x6c>
    1358:	e8 94       	clt
    135a:	6f 93       	push	r22
    135c:	6e 7f       	andi	r22, 0xFE	; 254
    135e:	6e 5f       	subi	r22, 0xFE	; 254
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	8f 4f       	sbci	r24, 0xFF	; 255
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	af 4f       	sbci	r26, 0xFF	; 255
    1368:	b1 e0       	ldi	r27, 0x01	; 1
    136a:	3e d0       	rcall	.+124    	; 0x13e8 <__ultoa_invert+0x9c>
    136c:	b4 e0       	ldi	r27, 0x04	; 4
    136e:	3c d0       	rcall	.+120    	; 0x13e8 <__ultoa_invert+0x9c>
    1370:	67 0f       	add	r22, r23
    1372:	78 1f       	adc	r23, r24
    1374:	89 1f       	adc	r24, r25
    1376:	9a 1f       	adc	r25, r26
    1378:	a1 1d       	adc	r26, r1
    137a:	68 0f       	add	r22, r24
    137c:	79 1f       	adc	r23, r25
    137e:	8a 1f       	adc	r24, r26
    1380:	91 1d       	adc	r25, r1
    1382:	a1 1d       	adc	r26, r1
    1384:	6a 0f       	add	r22, r26
    1386:	71 1d       	adc	r23, r1
    1388:	81 1d       	adc	r24, r1
    138a:	91 1d       	adc	r25, r1
    138c:	a1 1d       	adc	r26, r1
    138e:	20 d0       	rcall	.+64     	; 0x13d0 <__ultoa_invert+0x84>
    1390:	09 f4       	brne	.+2      	; 0x1394 <__ultoa_invert+0x48>
    1392:	68 94       	set
    1394:	3f 91       	pop	r19
    1396:	2a e0       	ldi	r18, 0x0A	; 10
    1398:	26 9f       	mul	r18, r22
    139a:	11 24       	eor	r1, r1
    139c:	30 19       	sub	r19, r0
    139e:	30 5d       	subi	r19, 0xD0	; 208
    13a0:	31 93       	st	Z+, r19
    13a2:	de f6       	brtc	.-74     	; 0x135a <__ultoa_invert+0xe>
    13a4:	cf 01       	movw	r24, r30
    13a6:	08 95       	ret
    13a8:	46 2f       	mov	r20, r22
    13aa:	47 70       	andi	r20, 0x07	; 7
    13ac:	40 5d       	subi	r20, 0xD0	; 208
    13ae:	41 93       	st	Z+, r20
    13b0:	b3 e0       	ldi	r27, 0x03	; 3
    13b2:	0f d0       	rcall	.+30     	; 0x13d2 <__ultoa_invert+0x86>
    13b4:	c9 f7       	brne	.-14     	; 0x13a8 <__ultoa_invert+0x5c>
    13b6:	f6 cf       	rjmp	.-20     	; 0x13a4 <__ultoa_invert+0x58>
    13b8:	46 2f       	mov	r20, r22
    13ba:	4f 70       	andi	r20, 0x0F	; 15
    13bc:	40 5d       	subi	r20, 0xD0	; 208
    13be:	4a 33       	cpi	r20, 0x3A	; 58
    13c0:	18 f0       	brcs	.+6      	; 0x13c8 <__ultoa_invert+0x7c>
    13c2:	49 5d       	subi	r20, 0xD9	; 217
    13c4:	31 fd       	sbrc	r19, 1
    13c6:	40 52       	subi	r20, 0x20	; 32
    13c8:	41 93       	st	Z+, r20
    13ca:	02 d0       	rcall	.+4      	; 0x13d0 <__ultoa_invert+0x84>
    13cc:	a9 f7       	brne	.-22     	; 0x13b8 <__ultoa_invert+0x6c>
    13ce:	ea cf       	rjmp	.-44     	; 0x13a4 <__ultoa_invert+0x58>
    13d0:	b4 e0       	ldi	r27, 0x04	; 4
    13d2:	a6 95       	lsr	r26
    13d4:	97 95       	ror	r25
    13d6:	87 95       	ror	r24
    13d8:	77 95       	ror	r23
    13da:	67 95       	ror	r22
    13dc:	ba 95       	dec	r27
    13de:	c9 f7       	brne	.-14     	; 0x13d2 <__ultoa_invert+0x86>
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	61 05       	cpc	r22, r1
    13e4:	71 05       	cpc	r23, r1
    13e6:	08 95       	ret
    13e8:	9b 01       	movw	r18, r22
    13ea:	ac 01       	movw	r20, r24
    13ec:	0a 2e       	mov	r0, r26
    13ee:	06 94       	lsr	r0
    13f0:	57 95       	ror	r21
    13f2:	47 95       	ror	r20
    13f4:	37 95       	ror	r19
    13f6:	27 95       	ror	r18
    13f8:	ba 95       	dec	r27
    13fa:	c9 f7       	brne	.-14     	; 0x13ee <__ultoa_invert+0xa2>
    13fc:	62 0f       	add	r22, r18
    13fe:	73 1f       	adc	r23, r19
    1400:	84 1f       	adc	r24, r20
    1402:	95 1f       	adc	r25, r21
    1404:	a0 1d       	adc	r26, r0
    1406:	08 95       	ret

00001408 <__prologue_saves__>:
    1408:	2f 92       	push	r2
    140a:	3f 92       	push	r3
    140c:	4f 92       	push	r4
    140e:	5f 92       	push	r5
    1410:	6f 92       	push	r6
    1412:	7f 92       	push	r7
    1414:	8f 92       	push	r8
    1416:	9f 92       	push	r9
    1418:	af 92       	push	r10
    141a:	bf 92       	push	r11
    141c:	cf 92       	push	r12
    141e:	df 92       	push	r13
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	ca 1b       	sub	r28, r26
    1432:	db 0b       	sbc	r29, r27
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	09 94       	ijmp

00001440 <__epilogue_restores__>:
    1440:	2a 88       	ldd	r2, Y+18	; 0x12
    1442:	39 88       	ldd	r3, Y+17	; 0x11
    1444:	48 88       	ldd	r4, Y+16	; 0x10
    1446:	5f 84       	ldd	r5, Y+15	; 0x0f
    1448:	6e 84       	ldd	r6, Y+14	; 0x0e
    144a:	7d 84       	ldd	r7, Y+13	; 0x0d
    144c:	8c 84       	ldd	r8, Y+12	; 0x0c
    144e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1450:	aa 84       	ldd	r10, Y+10	; 0x0a
    1452:	b9 84       	ldd	r11, Y+9	; 0x09
    1454:	c8 84       	ldd	r12, Y+8	; 0x08
    1456:	df 80       	ldd	r13, Y+7	; 0x07
    1458:	ee 80       	ldd	r14, Y+6	; 0x06
    145a:	fd 80       	ldd	r15, Y+5	; 0x05
    145c:	0c 81       	ldd	r16, Y+4	; 0x04
    145e:	1b 81       	ldd	r17, Y+3	; 0x03
    1460:	aa 81       	ldd	r26, Y+2	; 0x02
    1462:	b9 81       	ldd	r27, Y+1	; 0x01
    1464:	ce 0f       	add	r28, r30
    1466:	d1 1d       	adc	r29, r1
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	ed 01       	movw	r28, r26
    1474:	08 95       	ret

00001476 <_exit>:
    1476:	f8 94       	cli

00001478 <__stop_program>:
    1478:	ff cf       	rjmp	.-2      	; 0x1478 <__stop_program>
